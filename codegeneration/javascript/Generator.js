/*
 * This Visitor walks the AST generated by the transformers and produces code.
 * For every input language, can "inherit" the generated visitNode methods.
 */
module.exports = (superClass) => class ExtendedVisitor extends superClass {
  constructor() {
    super();
    this.regexFlags = {
      i: 'i',  // ignore case
      m: 'm',  // multiline
      u: 'u', // unicode
      y: 'y',   // sticky search
      g: 'g'    // global
    };
  }

  emitDate(ctx, date) {
    let newstr = '';
    if (ctx.wasNew) {
      newstr = 'new ';
    }
    if (date === undefined) {
      return `${newstr}Date()`;
    }
    const args = this.getArguments(ctx);
    const argstr = this.checkArguments(this.Symbols.Date.args, args, 'Date');
    return `${newstr}Date(${argstr.join(', ')})`;
  }
};
