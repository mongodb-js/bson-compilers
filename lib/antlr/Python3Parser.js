// Generated from grammars/Python3.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Python3Listener = require('./Python3Listener').Python3Listener;
var Python3Visitor = require('./Python3Visitor').Python3Visitor;

var grammarFileName = "Python3.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003b\u0477\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0005\u0002\u00c6\n\u0002\u0003\u0003\u0003",
    "\u0003\u0007\u0003\u00ca\n\u0003\f\u0003\u000e\u0003\u00cd\u000b\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0007\u0004\u00d3\n",
    "\u0004\f\u0004\u000e\u0004\u00d6\u000b\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00de\n",
    "\u0005\u0003\u0005\u0005\u0005\u00e1\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0006\u0006\u00e6\n\u0006\r\u0006\u000e\u0006\u00e7\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00ee\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u00f8\n\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u00ff\n",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0106",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u010c\n\u000b\u0007\u000b\u010e\n\u000b\f\u000b\u000e\u000b\u0111\u000b",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0116\n\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u011c\n",
    "\u000b\u0007\u000b\u011e\n\u000b\f\u000b\u000e\u000b\u0121\u000b\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0127\n",
    "\u000b\u0005\u000b\u0129\n\u000b\u0005\u000b\u012b\n\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u0130\n\u000b\u0005\u000b\u0132",
    "\n\u000b\u0005\u000b\u0134\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0138\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u013e\n\u000b\u0007\u000b\u0140\n\u000b\f\u000b\u000e\u000b\u0143",
    "\u000b\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0149\n\u000b\u0005\u000b\u014b\n\u000b\u0005\u000b\u014d\n\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0152\n\u000b\u0005\u000b",
    "\u0154\n\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0159\n\f\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u015e\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u0164\n\r\u0007\r\u0166\n\r\f\r\u000e\r\u0169\u000b\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u016e\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u0174\n\r\u0007\r\u0176\n\r\f\r\u000e\r\u0179\u000b\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u017f\n\r\u0005\r\u0181\n\r\u0005\r\u0183",
    "\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u0188\n\r\u0005\r\u018a\n\r\u0005",
    "\r\u018c\n\r\u0003\r\u0003\r\u0005\r\u0190\n\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u0196\n\r\u0007\r\u0198\n\r\f\r\u000e\r\u019b\u000b",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01a1\n\r\u0005\r\u01a3\n",
    "\r\u0005\r\u01a5\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u01aa\n\r\u0005",
    "\r\u01ac\n\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u01b2\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u01b7",
    "\n\u0010\f\u0010\u000e\u0010\u01ba\u000b\u0010\u0003\u0010\u0005\u0010",
    "\u01bd\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u01c9\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u01d0\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01d5\n\u0012\u0007\u0012\u01d7\n\u0012\f\u0012\u000e",
    "\u0012\u01da\u000b\u0012\u0005\u0012\u01dc\n\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01e2\n\u0013\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01e6\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u01eb\n\u0014\u0007\u0014\u01ed\n\u0014\f\u0014\u000e",
    "\u0014\u01f0\u000b\u0014\u0003\u0014\u0005\u0014\u01f3\n\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u0201\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0209\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0211",
    "\n\u001d\u0005\u001d\u0213\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u0217\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0007",
    " \u021e\n \f \u000e \u0221\u000b \u0003 \u0003 \u0006 \u0225\n \r \u000e",
    " \u0226\u0005 \u0229\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u0232\n \u0003!\u0003!\u0003!\u0005!\u0237\n!\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u023c\n\"\u0003#\u0003#\u0003#\u0007#\u0241\n#\f",
    "#\u000e#\u0244\u000b#\u0003#\u0005#\u0247\n#\u0003$\u0003$\u0003$\u0007",
    "$\u024c\n$\f$\u000e$\u024f\u000b$\u0003%\u0003%\u0003%\u0007%\u0254",
    "\n%\f%\u000e%\u0257\u000b%\u0003&\u0003&\u0003&\u0003&\u0007&\u025d",
    "\n&\f&\u000e&\u0260\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0266",
    "\n\'\f\'\u000e\'\u0269\u000b\'\u0003(\u0003(\u0003(\u0003(\u0005(\u026f",
    "\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u027a\n)\u0003*\u0003*\u0003*\u0003*\u0005*\u0280\n*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u028b\n+\f",
    "+\u000e+\u028e\u000b+\u0003+\u0003+\u0003+\u0005+\u0293\n+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u029c\n,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u02a7\n-\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0006.\u02b0\n.\r.\u000e.\u02b1",
    "\u0003.\u0003.\u0003.\u0005.\u02b7\n.\u0003.\u0003.\u0003.\u0005.\u02bc",
    "\n.\u0003.\u0003.\u0003.\u0005.\u02c1\n.\u0003/\u0003/\u0003/\u0003",
    "/\u0007/\u02c7\n/\f/\u000e/\u02ca\u000b/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00050\u02d2\n0\u00031\u00031\u00031\u00031\u00051\u02d8",
    "\n1\u00051\u02da\n1\u00032\u00032\u00032\u00032\u00062\u02e0\n2\r2\u000e",
    "2\u02e1\u00032\u00032\u00052\u02e6\n2\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u02ee\n3\u00033\u00053\u02f1\n3\u00034\u00034\u0005",
    "4\u02f5\n4\u00035\u00035\u00055\u02f9\n5\u00035\u00035\u00035\u0003",
    "6\u00036\u00056\u0300\n6\u00036\u00036\u00036\u00037\u00037\u00037\u0007",
    "7\u0308\n7\f7\u000e7\u030b\u000b7\u00038\u00038\u00038\u00078\u0310",
    "\n8\f8\u000e8\u0313\u000b8\u00039\u00039\u00039\u00059\u0318\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0007:\u031e\n:\f:\u000e:\u0321\u000b:\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u0330\n;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0007=\u0338\n=\f=\u000e=\u033b\u000b=\u0003>\u0003>\u0003>\u0007",
    ">\u0340\n>\f>\u000e>\u0343\u000b>\u0003?\u0003?\u0003?\u0007?\u0348",
    "\n?\f?\u000e?\u034b\u000b?\u0003@\u0003@\u0003@\u0007@\u0350\n@\f@\u000e",
    "@\u0353\u000b@\u0003A\u0003A\u0003A\u0007A\u0358\nA\fA\u000eA\u035b",
    "\u000bA\u0003B\u0003B\u0003B\u0007B\u0360\nB\fB\u000eB\u0363\u000bB",
    "\u0003C\u0003C\u0003C\u0005C\u0368\nC\u0003D\u0003D\u0003D\u0005D\u036d",
    "\nD\u0003E\u0005E\u0370\nE\u0003E\u0003E\u0007E\u0374\nE\fE\u000eE\u0377",
    "\u000bE\u0003F\u0003F\u0003F\u0005F\u037c\nF\u0003F\u0003F\u0003F\u0005",
    "F\u0381\nF\u0003F\u0003F\u0003F\u0005F\u0386\nF\u0003F\u0003F\u0003",
    "F\u0003F\u0006F\u038c\nF\rF\u000eF\u038d\u0003F\u0003F\u0003F\u0005",
    "F\u0393\nF\u0003G\u0003G\u0005G\u0397\nG\u0003G\u0003G\u0003G\u0003",
    "G\u0005G\u039d\nG\u0007G\u039f\nG\fG\u000eG\u03a2\u000bG\u0003G\u0005",
    "G\u03a5\nG\u0005G\u03a7\nG\u0003H\u0003H\u0003H\u0005H\u03ac\nH\u0003",
    "I\u0003I\u0005I\u03b0\nI\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0003L\u0003L\u0003L\u0007L\u03be\nL\fL\u000eL\u03c1",
    "\u000bL\u0003L\u0005L\u03c4\nL\u0003M\u0003M\u0005M\u03c8\nM\u0003M",
    "\u0003M\u0005M\u03cc\nM\u0003M\u0005M\u03cf\nM\u0005M\u03d1\nM\u0003",
    "N\u0003N\u0005N\u03d5\nN\u0003O\u0003O\u0005O\u03d9\nO\u0003O\u0003",
    "O\u0003O\u0005O\u03de\nO\u0007O\u03e0\nO\fO\u000eO\u03e3\u000bO\u0003",
    "O\u0005O\u03e6\nO\u0003P\u0003P\u0003P\u0007P\u03eb\nP\fP\u000eP\u03ee",
    "\u000bP\u0003P\u0005P\u03f1\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0005Q\u03f9\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0005Q\u0403\nQ\u0007Q\u0405\nQ\fQ\u000eQ\u0408\u000bQ\u0003Q\u0005",
    "Q\u040b\nQ\u0005Q\u040d\nQ\u0003Q\u0003Q\u0005Q\u0411\nQ\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u0417\nQ\u0007Q\u0419\nQ\fQ\u000eQ\u041c\u000b",
    "Q\u0003Q\u0005Q\u041f\nQ\u0005Q\u0421\nQ\u0005Q\u0423\nQ\u0003R\u0003",
    "R\u0003R\u0003R\u0005R\u0429\nR\u0003R\u0005R\u042c\nR\u0003R\u0003",
    "R\u0003R\u0003S\u0003S\u0003S\u0007S\u0434\nS\fS\u000eS\u0437\u000b",
    "S\u0003S\u0005S\u043a\nS\u0003T\u0003T\u0005T\u043e\nT\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u0448\nT\u0003U\u0003",
    "U\u0005U\u044c\nU\u0003V\u0005V\u044f\nV\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u0456\nV\u0003W\u0003W\u0003W\u0005W\u045b\nW\u0003",
    "X\u0003X\u0003Y\u0003Y\u0005Y\u0461\nY\u0003Z\u0003Z\u0003Z\u0005Z\u0466",
    "\nZ\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0005\\\u046d\n\\\u0003]\u0003",
    "]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003`\u0002\u0002a\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u0002\u000b\u0003\u0002R^\u0003\u0002",
    "01\u0003\u0002?@\u0003\u0002AB\u0005\u000222CEPP\u0004\u0002ABFF\u0003",
    "\u0002()\u0003\u0002*-\u0003\u0002\u001c\u001d\u0002\u04ec\u0002\u00c5",
    "\u0003\u0002\u0002\u0002\u0004\u00cb\u0003\u0002\u0002\u0002\u0006\u00d0",
    "\u0003\u0002\u0002\u0002\b\u00d9\u0003\u0002\u0002\u0002\n\u00e5\u0003",
    "\u0002\u0002\u0002\f\u00e9\u0003\u0002\u0002\u0002\u000e\u00ef\u0003",
    "\u0002\u0002\u0002\u0010\u00f2\u0003\u0002\u0002\u0002\u0012\u00fc\u0003",
    "\u0002\u0002\u0002\u0014\u0153\u0003\u0002\u0002\u0002\u0016\u0155\u0003",
    "\u0002\u0002\u0002\u0018\u01ab\u0003\u0002\u0002\u0002\u001a\u01ad\u0003",
    "\u0002\u0002\u0002\u001c\u01b1\u0003\u0002\u0002\u0002\u001e\u01b3\u0003",
    "\u0002\u0002\u0002 \u01c8\u0003\u0002\u0002\u0002\"\u01ca\u0003\u0002",
    "\u0002\u0002$\u01dd\u0003\u0002\u0002\u0002&\u01e5\u0003\u0002\u0002",
    "\u0002(\u01f4\u0003\u0002\u0002\u0002*\u01f6\u0003\u0002\u0002\u0002",
    ",\u01f9\u0003\u0002\u0002\u0002.\u0200\u0003\u0002\u0002\u00020\u0202",
    "\u0003\u0002\u0002\u00022\u0204\u0003\u0002\u0002\u00024\u0206\u0003",
    "\u0002\u0002\u00026\u020a\u0003\u0002\u0002\u00028\u020c\u0003\u0002",
    "\u0002\u0002:\u0216\u0003\u0002\u0002\u0002<\u0218\u0003\u0002\u0002",
    "\u0002>\u021b\u0003\u0002\u0002\u0002@\u0233\u0003\u0002\u0002\u0002",
    "B\u0238\u0003\u0002\u0002\u0002D\u023d\u0003\u0002\u0002\u0002F\u0248",
    "\u0003\u0002\u0002\u0002H\u0250\u0003\u0002\u0002\u0002J\u0258\u0003",
    "\u0002\u0002\u0002L\u0261\u0003\u0002\u0002\u0002N\u026a\u0003\u0002",
    "\u0002\u0002P\u0279\u0003\u0002\u0002\u0002R\u027b\u0003\u0002\u0002",
    "\u0002T\u0281\u0003\u0002\u0002\u0002V\u0294\u0003\u0002\u0002\u0002",
    "X\u029d\u0003\u0002\u0002\u0002Z\u02a8\u0003\u0002\u0002\u0002\\\u02c2",
    "\u0003\u0002\u0002\u0002^\u02ce\u0003\u0002\u0002\u0002`\u02d3\u0003",
    "\u0002\u0002\u0002b\u02e5\u0003\u0002\u0002\u0002d\u02f0\u0003\u0002",
    "\u0002\u0002f\u02f4\u0003\u0002\u0002\u0002h\u02f6\u0003\u0002\u0002",
    "\u0002j\u02fd\u0003\u0002\u0002\u0002l\u0304\u0003\u0002\u0002\u0002",
    "n\u030c\u0003\u0002\u0002\u0002p\u0317\u0003\u0002\u0002\u0002r\u0319",
    "\u0003\u0002\u0002\u0002t\u032f\u0003\u0002\u0002\u0002v\u0331\u0003",
    "\u0002\u0002\u0002x\u0334\u0003\u0002\u0002\u0002z\u033c\u0003\u0002",
    "\u0002\u0002|\u0344\u0003\u0002\u0002\u0002~\u034c\u0003\u0002\u0002",
    "\u0002\u0080\u0354\u0003\u0002\u0002\u0002\u0082\u035c\u0003\u0002\u0002",
    "\u0002\u0084\u0367\u0003\u0002\u0002\u0002\u0086\u0369\u0003\u0002\u0002",
    "\u0002\u0088\u036f\u0003\u0002\u0002\u0002\u008a\u0392\u0003\u0002\u0002",
    "\u0002\u008c\u0396\u0003\u0002\u0002\u0002\u008e\u03ab\u0003\u0002\u0002",
    "\u0002\u0090\u03ad\u0003\u0002\u0002\u0002\u0092\u03b3\u0003\u0002\u0002",
    "\u0002\u0094\u03b7\u0003\u0002\u0002\u0002\u0096\u03ba\u0003\u0002\u0002",
    "\u0002\u0098\u03d0\u0003\u0002\u0002\u0002\u009a\u03d2\u0003\u0002\u0002",
    "\u0002\u009c\u03d8\u0003\u0002\u0002\u0002\u009e\u03e7\u0003\u0002\u0002",
    "\u0002\u00a0\u0422\u0003\u0002\u0002\u0002\u00a2\u0424\u0003\u0002\u0002",
    "\u0002\u00a4\u0430\u0003\u0002\u0002\u0002\u00a6\u0447\u0003\u0002\u0002",
    "\u0002\u00a8\u044b\u0003\u0002\u0002\u0002\u00aa\u044e\u0003\u0002\u0002",
    "\u0002\u00ac\u0457\u0003\u0002\u0002\u0002\u00ae\u045c\u0003\u0002\u0002",
    "\u0002\u00b0\u045e\u0003\u0002\u0002\u0002\u00b2\u0465\u0003\u0002\u0002",
    "\u0002\u00b4\u0467\u0003\u0002\u0002\u0002\u00b6\u046c\u0003\u0002\u0002",
    "\u0002\u00b8\u046e\u0003\u0002\u0002\u0002\u00ba\u0470\u0003\u0002\u0002",
    "\u0002\u00bc\u0472\u0003\u0002\u0002\u0002\u00be\u0474\u0003\u0002\u0002",
    "\u0002\u00c0\u00c6\u0007&\u0002\u0002\u00c1\u00c6\u0005\u001e\u0010",
    "\u0002\u00c2\u00c3\u0005P)\u0002\u00c3\u00c4\u0007&\u0002\u0002\u00c4",
    "\u00c6\u0003\u0002\u0002\u0002\u00c5\u00c0\u0003\u0002\u0002\u0002\u00c5",
    "\u00c1\u0003\u0002\u0002\u0002\u00c5\u00c2\u0003\u0002\u0002\u0002\u00c6",
    "\u0003\u0003\u0002\u0002\u0002\u00c7\u00ca\u0007&\u0002\u0002\u00c8",
    "\u00ca\u0005\u001c\u000f\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002\u00c9",
    "\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cd\u0003\u0002\u0002\u0002\u00cb",
    "\u00c9\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc",
    "\u00ce\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00ce",
    "\u00cf\u0007\u0002\u0002\u0003\u00cf\u0005\u0003\u0002\u0002\u0002\u00d0",
    "\u00d4\u0005\u009eP\u0002\u00d1\u00d3\u0007&\u0002\u0002\u00d2\u00d1",
    "\u0003\u0002\u0002\u0002\u00d3\u00d6\u0003\u0002\u0002\u0002\u00d4\u00d2",
    "\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d7",
    "\u0003\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d7\u00d8",
    "\u0007\u0002\u0002\u0003\u00d8\u0007\u0003\u0002\u0002\u0002\u00d9\u00da",
    "\u0007P\u0002\u0002\u00da\u00e0\u0005H%\u0002\u00db\u00dd\u00073\u0002",
    "\u0002\u00dc\u00de\u0005\u00a4S\u0002\u00dd\u00dc\u0003\u0002\u0002",
    "\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002",
    "\u0002\u00df\u00e1\u00074\u0002\u0002\u00e0\u00db\u0003\u0002\u0002",
    "\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002",
    "\u0002\u00e2\u00e3\u0007&\u0002\u0002\u00e3\t\u0003\u0002\u0002\u0002",
    "\u00e4\u00e6\u0005\b\u0005\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002",
    "\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002",
    "\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u000b\u0003\u0002\u0002\u0002",
    "\u00e9\u00ed\u0005\n\u0006\u0002\u00ea\u00ee\u0005\u00a2R\u0002\u00eb",
    "\u00ee\u0005\u0010\t\u0002\u00ec\u00ee\u0005\u000e\b\u0002\u00ed\u00ea",
    "\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ed\u00ec",
    "\u0003\u0002\u0002\u0002\u00ee\r\u0003\u0002\u0002\u0002\u00ef\u00f0",
    "\u0007$\u0002\u0002\u00f0\u00f1\u0005\u0010\t\u0002\u00f1\u000f\u0003",
    "\u0002\u0002\u0002\u00f2\u00f3\u0007\u0003\u0002\u0002\u00f3\u00f4\u0007",
    "\'\u0002\u0002\u00f4\u00f7\u0005\u0012\n\u0002\u00f5\u00f6\u0007Q\u0002",
    "\u0002\u00f6\u00f8\u0005d3\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u00076\u0002\u0002\u00fa\u00fb\u0005b2\u0002\u00fb\u0011",
    "\u0003\u0002\u0002\u0002\u00fc\u00fe\u00073\u0002\u0002\u00fd\u00ff",
    "\u0005\u0014\u000b\u0002\u00fe\u00fd\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002\u0100\u0101",
    "\u00074\u0002\u0002\u0101\u0013\u0003\u0002\u0002\u0002\u0102\u0105",
    "\u0005\u0016\f\u0002\u0103\u0104\u00079\u0002\u0002\u0104\u0106\u0005",
    "d3\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105\u0106\u0003\u0002",
    "\u0002\u0002\u0106\u010f\u0003\u0002\u0002\u0002\u0107\u0108\u00075",
    "\u0002\u0002\u0108\u010b\u0005\u0016\f\u0002\u0109\u010a\u00079\u0002",
    "\u0002\u010a\u010c\u0005d3\u0002\u010b\u0109\u0003\u0002\u0002\u0002",
    "\u010b\u010c\u0003\u0002\u0002\u0002\u010c\u010e\u0003\u0002\u0002\u0002",
    "\u010d\u0107\u0003\u0002\u0002\u0002\u010e\u0111\u0003\u0002\u0002\u0002",
    "\u010f\u010d\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002",
    "\u0110\u0133\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0112\u0131\u00075\u0002\u0002\u0113\u0115\u00072\u0002\u0002\u0114",
    "\u0116\u0005\u0016\f\u0002\u0115\u0114\u0003\u0002\u0002\u0002\u0115",
    "\u0116\u0003\u0002\u0002\u0002\u0116\u011f\u0003\u0002\u0002\u0002\u0117",
    "\u0118\u00075\u0002\u0002\u0118\u011b\u0005\u0016\f\u0002\u0119\u011a",
    "\u00079\u0002\u0002\u011a\u011c\u0005d3\u0002\u011b\u0119\u0003\u0002",
    "\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011e\u0003\u0002",
    "\u0002\u0002\u011d\u0117\u0003\u0002\u0002\u0002\u011e\u0121\u0003\u0002",
    "\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002",
    "\u0002\u0002\u0120\u012a\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002",
    "\u0002\u0002\u0122\u0128\u00075\u0002\u0002\u0123\u0124\u00078\u0002",
    "\u0002\u0124\u0126\u0005\u0016\f\u0002\u0125\u0127\u00075\u0002\u0002",
    "\u0126\u0125\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002",
    "\u0127\u0129\u0003\u0002\u0002\u0002\u0128\u0123\u0003\u0002\u0002\u0002",
    "\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u012b\u0003\u0002\u0002\u0002",
    "\u012a\u0122\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002",
    "\u012b\u0132\u0003\u0002\u0002\u0002\u012c\u012d\u00078\u0002\u0002",
    "\u012d\u012f\u0005\u0016\f\u0002\u012e\u0130\u00075\u0002\u0002\u012f",
    "\u012e\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130",
    "\u0132\u0003\u0002\u0002\u0002\u0131\u0113\u0003\u0002\u0002\u0002\u0131",
    "\u012c\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132",
    "\u0134\u0003\u0002\u0002\u0002\u0133\u0112\u0003\u0002\u0002\u0002\u0133",
    "\u0134\u0003\u0002\u0002\u0002\u0134\u0154\u0003\u0002\u0002\u0002\u0135",
    "\u0137\u00072\u0002\u0002\u0136\u0138\u0005\u0016\f\u0002\u0137\u0136",
    "\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u0141",
    "\u0003\u0002\u0002\u0002\u0139\u013a\u00075\u0002\u0002\u013a\u013d",
    "\u0005\u0016\f\u0002\u013b\u013c\u00079\u0002\u0002\u013c\u013e\u0005",
    "d3\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002",
    "\u0002\u0002\u013e\u0140\u0003\u0002\u0002\u0002\u013f\u0139\u0003\u0002",
    "\u0002\u0002\u0140\u0143\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002",
    "\u0002\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u014c\u0003\u0002",
    "\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0144\u014a\u00075",
    "\u0002\u0002\u0145\u0146\u00078\u0002\u0002\u0146\u0148\u0005\u0016",
    "\f\u0002\u0147\u0149\u00075\u0002\u0002\u0148\u0147\u0003\u0002\u0002",
    "\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u014b\u0003\u0002\u0002",
    "\u0002\u014a\u0145\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002",
    "\u0002\u014b\u014d\u0003\u0002\u0002\u0002\u014c\u0144\u0003\u0002\u0002",
    "\u0002\u014c\u014d\u0003\u0002\u0002\u0002\u014d\u0154\u0003\u0002\u0002",
    "\u0002\u014e\u014f\u00078\u0002\u0002\u014f\u0151\u0005\u0016\f\u0002",
    "\u0150\u0152\u00075\u0002\u0002\u0151\u0150\u0003\u0002\u0002\u0002",
    "\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0154\u0003\u0002\u0002\u0002",
    "\u0153\u0102\u0003\u0002\u0002\u0002\u0153\u0135\u0003\u0002\u0002\u0002",
    "\u0153\u014e\u0003\u0002\u0002\u0002\u0154\u0015\u0003\u0002\u0002\u0002",
    "\u0155\u0158\u0007\'\u0002\u0002\u0156\u0157\u00076\u0002\u0002\u0157",
    "\u0159\u0005d3\u0002\u0158\u0156\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0003\u0002\u0002\u0002\u0159\u0017\u0003\u0002\u0002\u0002\u015a\u015d",
    "\u0005\u001a\u000e\u0002\u015b\u015c\u00079\u0002\u0002\u015c\u015e",
    "\u0005d3\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0167\u0003\u0002\u0002\u0002\u015f\u0160\u0007",
    "5\u0002\u0002\u0160\u0163\u0005\u001a\u000e\u0002\u0161\u0162\u0007",
    "9\u0002\u0002\u0162\u0164\u0005d3\u0002\u0163\u0161\u0003\u0002\u0002",
    "\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0166\u0003\u0002\u0002",
    "\u0002\u0165\u015f\u0003\u0002\u0002\u0002\u0166\u0169\u0003\u0002\u0002",
    "\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002",
    "\u0002\u0168\u018b\u0003\u0002\u0002\u0002\u0169\u0167\u0003\u0002\u0002",
    "\u0002\u016a\u0189\u00075\u0002\u0002\u016b\u016d\u00072\u0002\u0002",
    "\u016c\u016e\u0005\u001a\u000e\u0002\u016d\u016c\u0003\u0002\u0002\u0002",
    "\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0177\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u00075\u0002\u0002\u0170\u0173\u0005\u001a\u000e\u0002",
    "\u0171\u0172\u00079\u0002\u0002\u0172\u0174\u0005d3\u0002\u0173\u0171",
    "\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0176",
    "\u0003\u0002\u0002\u0002\u0175\u016f\u0003\u0002\u0002\u0002\u0176\u0179",
    "\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0003\u0002\u0002\u0002\u0178\u0182\u0003\u0002\u0002\u0002\u0179\u0177",
    "\u0003\u0002\u0002\u0002\u017a\u0180\u00075\u0002\u0002\u017b\u017c",
    "\u00078\u0002\u0002\u017c\u017e\u0005\u001a\u000e\u0002\u017d\u017f",
    "\u00075\u0002\u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017e\u017f",
    "\u0003\u0002\u0002\u0002\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u017b",
    "\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0183",
    "\u0003\u0002\u0002\u0002\u0182\u017a\u0003\u0002\u0002\u0002\u0182\u0183",
    "\u0003\u0002\u0002\u0002\u0183\u018a\u0003\u0002\u0002\u0002\u0184\u0185",
    "\u00078\u0002\u0002\u0185\u0187\u0005\u001a\u000e\u0002\u0186\u0188",
    "\u00075\u0002\u0002\u0187\u0186\u0003\u0002\u0002\u0002\u0187\u0188",
    "\u0003\u0002\u0002\u0002\u0188\u018a\u0003\u0002\u0002\u0002\u0189\u016b",
    "\u0003\u0002\u0002\u0002\u0189\u0184\u0003\u0002\u0002\u0002\u0189\u018a",
    "\u0003\u0002\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u016a",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c\u01ac",
    "\u0003\u0002\u0002\u0002\u018d\u018f\u00072\u0002\u0002\u018e\u0190",
    "\u0005\u001a\u000e\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u018f\u0190",
    "\u0003\u0002\u0002\u0002\u0190\u0199\u0003\u0002\u0002\u0002\u0191\u0192",
    "\u00075\u0002\u0002\u0192\u0195\u0005\u001a\u000e\u0002\u0193\u0194",
    "\u00079\u0002\u0002\u0194\u0196\u0005d3\u0002\u0195\u0193\u0003\u0002",
    "\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0198\u0003\u0002",
    "\u0002\u0002\u0197\u0191\u0003\u0002\u0002\u0002\u0198\u019b\u0003\u0002",
    "\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002",
    "\u0002\u0002\u019a\u01a4\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002",
    "\u0002\u0002\u019c\u01a2\u00075\u0002\u0002\u019d\u019e\u00078\u0002",
    "\u0002\u019e\u01a0\u0005\u001a\u000e\u0002\u019f\u01a1\u00075\u0002",
    "\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002",
    "\u0002\u01a1\u01a3\u0003\u0002\u0002\u0002\u01a2\u019d\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a5\u0003\u0002\u0002",
    "\u0002\u01a4\u019c\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002",
    "\u0002\u01a5\u01ac\u0003\u0002\u0002\u0002\u01a6\u01a7\u00078\u0002",
    "\u0002\u01a7\u01a9\u0005\u001a\u000e\u0002\u01a8\u01aa\u00075\u0002",
    "\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002",
    "\u0002\u01aa\u01ac\u0003\u0002\u0002\u0002\u01ab\u015a\u0003\u0002\u0002",
    "\u0002\u01ab\u018d\u0003\u0002\u0002\u0002\u01ab\u01a6\u0003\u0002\u0002",
    "\u0002\u01ac\u0019\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\'\u0002",
    "\u0002\u01ae\u001b\u0003\u0002\u0002\u0002\u01af\u01b2\u0005\u001e\u0010",
    "\u0002\u01b0\u01b2\u0005P)\u0002\u01b1\u01af\u0003\u0002\u0002\u0002",
    "\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b2\u001d\u0003\u0002\u0002\u0002",
    "\u01b3\u01b8\u0005 \u0011\u0002\u01b4\u01b5\u00077\u0002\u0002\u01b5",
    "\u01b7\u0005 \u0011\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002\u01b7",
    "\u01ba\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8",
    "\u01b9\u0003\u0002\u0002\u0002\u01b9\u01bc\u0003\u0002\u0002\u0002\u01ba",
    "\u01b8\u0003\u0002\u0002\u0002\u01bb\u01bd\u00077\u0002\u0002\u01bc",
    "\u01bb\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd",
    "\u01be\u0003\u0002\u0002\u0002\u01be\u01bf\u0007&\u0002\u0002\u01bf",
    "\u001f\u0003\u0002\u0002\u0002\u01c0\u01c9\u0005\"\u0012\u0002\u01c1",
    "\u01c9\u0005*\u0016\u0002\u01c2\u01c9\u0005,\u0017\u0002\u01c3\u01c9",
    "\u0005.\u0018\u0002\u01c4\u01c9\u0005:\u001e\u0002\u01c5\u01c9\u0005",
    "J&\u0002\u01c6\u01c9\u0005L\'\u0002\u01c7\u01c9\u0005N(\u0002\u01c8",
    "\u01c0\u0003\u0002\u0002\u0002\u01c8\u01c1\u0003\u0002\u0002\u0002\u01c8",
    "\u01c2\u0003\u0002\u0002\u0002\u01c8\u01c3\u0003\u0002\u0002\u0002\u01c8",
    "\u01c4\u0003\u0002\u0002\u0002\u01c8\u01c5\u0003\u0002\u0002\u0002\u01c8",
    "\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c9",
    "!\u0003\u0002\u0002\u0002\u01ca\u01db\u0005&\u0014\u0002\u01cb\u01dc",
    "\u0005$\u0013\u0002\u01cc\u01cf\u0005(\u0015\u0002\u01cd\u01d0\u0005",
    "\u00b0Y\u0002\u01ce\u01d0\u0005\u009eP\u0002\u01cf\u01cd\u0003\u0002",
    "\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01d0\u01dc\u0003\u0002",
    "\u0002\u0002\u01d1\u01d4\u00079\u0002\u0002\u01d2\u01d5\u0005\u00b0",
    "Y\u0002\u01d3\u01d5\u0005&\u0014\u0002\u01d4\u01d2\u0003\u0002\u0002",
    "\u0002\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d7\u0003\u0002\u0002",
    "\u0002\u01d6\u01d1\u0003\u0002\u0002\u0002\u01d7\u01da\u0003\u0002\u0002",
    "\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002",
    "\u0002\u01d9\u01dc\u0003\u0002\u0002\u0002\u01da\u01d8\u0003\u0002\u0002",
    "\u0002\u01db\u01cb\u0003\u0002\u0002\u0002\u01db\u01cc\u0003\u0002\u0002",
    "\u0002\u01db\u01d8\u0003\u0002\u0002\u0002\u01dc#\u0003\u0002\u0002",
    "\u0002\u01dd\u01de\u00076\u0002\u0002\u01de\u01e1\u0005d3\u0002\u01df",
    "\u01e0\u00079\u0002\u0002\u01e0\u01e2\u0005d3\u0002\u01e1\u01df\u0003",
    "\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2%\u0003",
    "\u0002\u0002\u0002\u01e3\u01e6\u0005d3\u0002\u01e4\u01e6\u0005v<\u0002",
    "\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002",
    "\u01e6\u01ee\u0003\u0002\u0002\u0002\u01e7\u01ea\u00075\u0002\u0002",
    "\u01e8\u01eb\u0005d3\u0002\u01e9\u01eb\u0005v<\u0002\u01ea\u01e8\u0003",
    "\u0002\u0002\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002\u01eb\u01ed\u0003",
    "\u0002\u0002\u0002\u01ec\u01e7\u0003\u0002\u0002\u0002\u01ed\u01f0\u0003",
    "\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003",
    "\u0002\u0002\u0002\u01ef\u01f2\u0003\u0002\u0002\u0002\u01f0\u01ee\u0003",
    "\u0002\u0002\u0002\u01f1\u01f3\u00075\u0002\u0002\u01f2\u01f1\u0003",
    "\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\'\u0003",
    "\u0002\u0002\u0002\u01f4\u01f5\t\u0002\u0002\u0002\u01f5)\u0003\u0002",
    "\u0002\u0002\u01f6\u01f7\u0007 \u0002\u0002\u01f7\u01f8\u0005\u009c",
    "O\u0002\u01f8+\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007!\u0002\u0002",
    "\u01fa-\u0003\u0002\u0002\u0002\u01fb\u0201\u00050\u0019\u0002\u01fc",
    "\u0201\u00052\u001a\u0002\u01fd\u0201\u00054\u001b\u0002\u01fe\u0201",
    "\u00058\u001d\u0002\u01ff\u0201\u00056\u001c\u0002\u0200\u01fb\u0003",
    "\u0002\u0002\u0002\u0200\u01fc\u0003\u0002\u0002\u0002\u0200\u01fd\u0003",
    "\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200\u01ff\u0003",
    "\u0002\u0002\u0002\u0201/\u0003\u0002\u0002\u0002\u0202\u0203\u0007",
    "#\u0002\u0002\u02031\u0003\u0002\u0002\u0002\u0204\u0205\u0007\"\u0002",
    "\u0002\u02053\u0003\u0002\u0002\u0002\u0206\u0208\u0007\u0004\u0002",
    "\u0002\u0207\u0209\u0005\u009eP\u0002\u0208\u0207\u0003\u0002\u0002",
    "\u0002\u0208\u0209\u0003\u0002\u0002\u0002\u02095\u0003\u0002\u0002",
    "\u0002\u020a\u020b\u0005\u00b0Y\u0002\u020b7\u0003\u0002\u0002\u0002",
    "\u020c\u0212\u0007\u0005\u0002\u0002\u020d\u0210\u0005d3\u0002\u020e",
    "\u020f\u0007\u0006\u0002\u0002\u020f\u0211\u0005d3\u0002\u0210\u020e",
    "\u0003\u0002\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0213",
    "\u0003\u0002\u0002\u0002\u0212\u020d\u0003\u0002\u0002\u0002\u0212\u0213",
    "\u0003\u0002\u0002\u0002\u02139\u0003\u0002\u0002\u0002\u0214\u0217",
    "\u0005<\u001f\u0002\u0215\u0217\u0005> \u0002\u0216\u0214\u0003\u0002",
    "\u0002\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0217;\u0003\u0002",
    "\u0002\u0002\u0218\u0219\u0007\u0007\u0002\u0002\u0219\u021a\u0005F",
    "$\u0002\u021a=\u0003\u0002\u0002\u0002\u021b\u0228\u0007\u0006\u0002",
    "\u0002\u021c\u021e\t\u0003\u0002\u0002\u021d\u021c\u0003\u0002\u0002",
    "\u0002\u021e\u0221\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002",
    "\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003\u0002\u0002",
    "\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0222\u0229\u0005H%\u0002",
    "\u0223\u0225\t\u0003\u0002\u0002\u0224\u0223\u0003\u0002\u0002\u0002",
    "\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002",
    "\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002",
    "\u0228\u021f\u0003\u0002\u0002\u0002\u0228\u0224\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u0231\u0007\u0007\u0002\u0002",
    "\u022b\u0232\u00072\u0002\u0002\u022c\u022d\u00073\u0002\u0002\u022d",
    "\u022e\u0005D#\u0002\u022e\u022f\u00074\u0002\u0002\u022f\u0232\u0003",
    "\u0002\u0002\u0002\u0230\u0232\u0005D#\u0002\u0231\u022b\u0003\u0002",
    "\u0002\u0002\u0231\u022c\u0003\u0002\u0002\u0002\u0231\u0230\u0003\u0002",
    "\u0002\u0002\u0232?\u0003\u0002\u0002\u0002\u0233\u0236\u0007\'\u0002",
    "\u0002\u0234\u0235\u0007\b\u0002\u0002\u0235\u0237\u0007\'\u0002\u0002",
    "\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002",
    "\u0237A\u0003\u0002\u0002\u0002\u0238\u023b\u0005H%\u0002\u0239\u023a",
    "\u0007\b\u0002\u0002\u023a\u023c\u0007\'\u0002\u0002\u023b\u0239\u0003",
    "\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023cC\u0003",
    "\u0002\u0002\u0002\u023d\u0242\u0005@!\u0002\u023e\u023f\u00075\u0002",
    "\u0002\u023f\u0241\u0005@!\u0002\u0240\u023e\u0003\u0002\u0002\u0002",
    "\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002",
    "\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0246\u0003\u0002\u0002\u0002",
    "\u0244\u0242\u0003\u0002\u0002\u0002\u0245\u0247\u00075\u0002\u0002",
    "\u0246\u0245\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002",
    "\u0247E\u0003\u0002\u0002\u0002\u0248\u024d\u0005B\"\u0002\u0249\u024a",
    "\u00075\u0002\u0002\u024a\u024c\u0005B\"\u0002\u024b\u0249\u0003\u0002",
    "\u0002\u0002\u024c\u024f\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002",
    "\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024eG\u0003\u0002",
    "\u0002\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250\u0255\u0007\'",
    "\u0002\u0002\u0251\u0252\u00070\u0002\u0002\u0252\u0254\u0007\'\u0002",
    "\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0257\u0003\u0002\u0002",
    "\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002",
    "\u0002\u0256I\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002",
    "\u0002\u0258\u0259\u0007\t\u0002\u0002\u0259\u025e\u0007\'\u0002\u0002",
    "\u025a\u025b\u00075\u0002\u0002\u025b\u025d\u0007\'\u0002\u0002\u025c",
    "\u025a\u0003\u0002\u0002\u0002\u025d\u0260\u0003\u0002\u0002\u0002\u025e",
    "\u025c\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f",
    "K\u0003\u0002\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002\u0261",
    "\u0262\u0007\n\u0002\u0002\u0262\u0267\u0007\'\u0002\u0002\u0263\u0264",
    "\u00075\u0002\u0002\u0264\u0266\u0007\'\u0002\u0002\u0265\u0263\u0003",
    "\u0002\u0002\u0002\u0266\u0269\u0003\u0002\u0002\u0002\u0267\u0265\u0003",
    "\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268M\u0003",
    "\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0007",
    "\u000b\u0002\u0002\u026b\u026e\u0005d3\u0002\u026c\u026d\u00075\u0002",
    "\u0002\u026d\u026f\u0005d3\u0002\u026e\u026c\u0003\u0002\u0002\u0002",
    "\u026e\u026f\u0003\u0002\u0002\u0002\u026fO\u0003\u0002\u0002\u0002",
    "\u0270\u027a\u0005T+\u0002\u0271\u027a\u0005V,\u0002\u0272\u027a\u0005",
    "X-\u0002\u0273\u027a\u0005Z.\u0002\u0274\u027a\u0005\\/\u0002\u0275",
    "\u027a\u0005\u0010\t\u0002\u0276\u027a\u0005\u00a2R\u0002\u0277\u027a",
    "\u0005\f\u0007\u0002\u0278\u027a\u0005R*\u0002\u0279\u0270\u0003\u0002",
    "\u0002\u0002\u0279\u0271\u0003\u0002\u0002\u0002\u0279\u0272\u0003\u0002",
    "\u0002\u0002\u0279\u0273\u0003\u0002\u0002\u0002\u0279\u0274\u0003\u0002",
    "\u0002\u0002\u0279\u0275\u0003\u0002\u0002\u0002\u0279\u0276\u0003\u0002",
    "\u0002\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u0279\u0278\u0003\u0002",
    "\u0002\u0002\u027aQ\u0003\u0002\u0002\u0002\u027b\u027f\u0007$\u0002",
    "\u0002\u027c\u0280\u0005\u0010\t\u0002\u027d\u0280\u0005\\/\u0002\u027e",
    "\u0280\u0005X-\u0002\u027f\u027c\u0003\u0002\u0002\u0002\u027f\u027d",
    "\u0003\u0002\u0002\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u0280S",
    "\u0003\u0002\u0002\u0002\u0281\u0282\u0007\f\u0002\u0002\u0282\u0283",
    "\u0005d3\u0002\u0283\u0284\u00076\u0002\u0002\u0284\u028c\u0005b2\u0002",
    "\u0285\u0286\u0007\r\u0002\u0002\u0286\u0287\u0005d3\u0002\u0287\u0288",
    "\u00076\u0002\u0002\u0288\u0289\u0005b2\u0002\u0289\u028b\u0003\u0002",
    "\u0002\u0002\u028a\u0285\u0003\u0002\u0002\u0002\u028b\u028e\u0003\u0002",
    "\u0002\u0002\u028c\u028a\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002",
    "\u0002\u0002\u028d\u0292\u0003\u0002\u0002\u0002\u028e\u028c\u0003\u0002",
    "\u0002\u0002\u028f\u0290\u0007\u000e\u0002\u0002\u0290\u0291\u00076",
    "\u0002\u0002\u0291\u0293\u0005b2\u0002\u0292\u028f\u0003\u0002\u0002",
    "\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293U\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0007\u000f\u0002\u0002\u0295\u0296\u0005d3\u0002",
    "\u0296\u0297\u00076\u0002\u0002\u0297\u029b\u0005b2\u0002\u0298\u0299",
    "\u0007\u000e\u0002\u0002\u0299\u029a\u00076\u0002\u0002\u029a\u029c",
    "\u0005b2\u0002\u029b\u0298\u0003\u0002\u0002\u0002\u029b\u029c\u0003",
    "\u0002\u0002\u0002\u029cW\u0003\u0002\u0002\u0002\u029d\u029e\u0007",
    "\u0010\u0002\u0002\u029e\u029f\u0005\u009cO\u0002\u029f\u02a0\u0007",
    "\u0011\u0002\u0002\u02a0\u02a1\u0005\u009eP\u0002\u02a1\u02a2\u0007",
    "6\u0002\u0002\u02a2\u02a6\u0005b2\u0002\u02a3\u02a4\u0007\u000e\u0002",
    "\u0002\u02a4\u02a5\u00076\u0002\u0002\u02a5\u02a7\u0005b2\u0002\u02a6",
    "\u02a3\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7",
    "Y\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007\u0012\u0002\u0002\u02a9",
    "\u02aa\u00076\u0002\u0002\u02aa\u02c0\u0005b2\u0002\u02ab\u02ac\u0005",
    "`1\u0002\u02ac\u02ad\u00076\u0002\u0002\u02ad\u02ae\u0005b2\u0002\u02ae",
    "\u02b0\u0003\u0002\u0002\u0002\u02af\u02ab\u0003\u0002\u0002\u0002\u02b0",
    "\u02b1\u0003\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b1",
    "\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b6\u0003\u0002\u0002\u0002\u02b3",
    "\u02b4\u0007\u000e\u0002\u0002\u02b4\u02b5\u00076\u0002\u0002\u02b5",
    "\u02b7\u0005b2\u0002\u02b6\u02b3\u0003\u0002\u0002\u0002\u02b6\u02b7",
    "\u0003\u0002\u0002\u0002\u02b7\u02bb\u0003\u0002\u0002\u0002\u02b8\u02b9",
    "\u0007\u0013\u0002\u0002\u02b9\u02ba\u00076\u0002\u0002\u02ba\u02bc",
    "\u0005b2\u0002\u02bb\u02b8\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02c1\u0003\u0002\u0002\u0002\u02bd\u02be\u0007",
    "\u0013\u0002\u0002\u02be\u02bf\u00076\u0002\u0002\u02bf\u02c1\u0005",
    "b2\u0002\u02c0\u02af\u0003\u0002\u0002\u0002\u02c0\u02bd\u0003\u0002",
    "\u0002\u0002\u02c1[\u0003\u0002\u0002\u0002\u02c2\u02c3\u0007\u0014",
    "\u0002\u0002\u02c3\u02c8\u0005^0\u0002\u02c4\u02c5\u00075\u0002\u0002",
    "\u02c5\u02c7\u0005^0\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c7",
    "\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cb\u0003\u0002\u0002\u0002\u02ca",
    "\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cc\u00076\u0002\u0002\u02cc",
    "\u02cd\u0005b2\u0002\u02cd]\u0003\u0002\u0002\u0002\u02ce\u02d1\u0005",
    "d3\u0002\u02cf\u02d0\u0007\b\u0002\u0002\u02d0\u02d2\u0005x=\u0002\u02d1",
    "\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2",
    "_\u0003\u0002\u0002\u0002\u02d3\u02d9\u0007\u0015\u0002\u0002\u02d4",
    "\u02d7\u0005d3\u0002\u02d5\u02d6\u0007\b\u0002\u0002\u02d6\u02d8\u0007",
    "\'\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003",
    "\u0002\u0002\u0002\u02d8\u02da\u0003\u0002\u0002\u0002\u02d9\u02d4\u0003",
    "\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02daa\u0003",
    "\u0002\u0002\u0002\u02db\u02e6\u0005\u001e\u0010\u0002\u02dc\u02dd\u0007",
    "&\u0002\u0002\u02dd\u02df\u0007a\u0002\u0002\u02de\u02e0\u0005\u001c",
    "\u000f\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002",
    "\u0002\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002",
    "\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007b",
    "\u0002\u0002\u02e4\u02e6\u0003\u0002\u0002\u0002\u02e5\u02db\u0003\u0002",
    "\u0002\u0002\u02e5\u02dc\u0003\u0002\u0002\u0002\u02e6c\u0003\u0002",
    "\u0002\u0002\u02e7\u02ed\u0005l7\u0002\u02e8\u02e9\u0007\f\u0002\u0002",
    "\u02e9\u02ea\u0005l7\u0002\u02ea\u02eb\u0007\u000e\u0002\u0002\u02eb",
    "\u02ec\u0005d3\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002\u02ed\u02e8",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02f1",
    "\u0003\u0002\u0002\u0002\u02ef\u02f1\u0005h5\u0002\u02f0\u02e7\u0003",
    "\u0002\u0002\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1e\u0003",
    "\u0002\u0002\u0002\u02f2\u02f5\u0005l7\u0002\u02f3\u02f5\u0005j6\u0002",
    "\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002",
    "\u02f5g\u0003\u0002\u0002\u0002\u02f6\u02f8\u0007\u0016\u0002\u0002",
    "\u02f7\u02f9\u0005\u0018\r\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002",
    "\u02fa\u02fb\u00076\u0002\u0002\u02fb\u02fc\u0005d3\u0002\u02fci\u0003",
    "\u0002\u0002\u0002\u02fd\u02ff\u0007\u0016\u0002\u0002\u02fe\u0300\u0005",
    "\u0018\r\u0002\u02ff\u02fe\u0003\u0002\u0002\u0002\u02ff\u0300\u0003",
    "\u0002\u0002\u0002\u0300\u0301\u0003\u0002\u0002\u0002\u0301\u0302\u0007",
    "6\u0002\u0002\u0302\u0303\u0005f4\u0002\u0303k\u0003\u0002\u0002\u0002",
    "\u0304\u0309\u0005n8\u0002\u0305\u0306\u0007\u0017\u0002\u0002\u0306",
    "\u0308\u0005n8\u0002\u0307\u0305\u0003\u0002\u0002\u0002\u0308\u030b",
    "\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0003\u0002\u0002\u0002\u030am\u0003\u0002\u0002\u0002\u030b\u0309",
    "\u0003\u0002\u0002\u0002\u030c\u0311\u0005p9\u0002\u030d\u030e\u0007",
    "\u0018\u0002\u0002\u030e\u0310\u0005p9\u0002\u030f\u030d\u0003\u0002",
    "\u0002\u0002\u0310\u0313\u0003\u0002\u0002\u0002\u0311\u030f\u0003\u0002",
    "\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002\u0312o\u0003\u0002",
    "\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0314\u0315\u0007\u0019",
    "\u0002\u0002\u0315\u0318\u0005p9\u0002\u0316\u0318\u0005r:\u0002\u0317",
    "\u0314\u0003\u0002\u0002\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0318",
    "q\u0003\u0002\u0002\u0002\u0319\u031f\u0005x=\u0002\u031a\u031b\u0005",
    "t;\u0002\u031b\u031c\u0005x=\u0002\u031c\u031e\u0003\u0002\u0002\u0002",
    "\u031d\u031a\u0003\u0002\u0002\u0002\u031e\u0321\u0003\u0002\u0002\u0002",
    "\u031f\u031d\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002",
    "\u0320s\u0003\u0002\u0002\u0002\u0321\u031f\u0003\u0002\u0002\u0002",
    "\u0322\u0330\u0007I\u0002\u0002\u0323\u0330\u0007J\u0002\u0002\u0324",
    "\u0330\u0007K\u0002\u0002\u0325\u0330\u0007L\u0002\u0002\u0326\u0330",
    "\u0007M\u0002\u0002\u0327\u0330\u0007N\u0002\u0002\u0328\u0330\u0007",
    "O\u0002\u0002\u0329\u0330\u0007\u0011\u0002\u0002\u032a\u032b\u0007",
    "\u0019\u0002\u0002\u032b\u0330\u0007\u0011\u0002\u0002\u032c\u0330\u0007",
    "\u001a\u0002\u0002\u032d\u032e\u0007\u001a\u0002\u0002\u032e\u0330\u0007",
    "\u0019\u0002\u0002\u032f\u0322\u0003\u0002\u0002\u0002\u032f\u0323\u0003",
    "\u0002\u0002\u0002\u032f\u0324\u0003\u0002\u0002\u0002\u032f\u0325\u0003",
    "\u0002\u0002\u0002\u032f\u0326\u0003\u0002\u0002\u0002\u032f\u0327\u0003",
    "\u0002\u0002\u0002\u032f\u0328\u0003\u0002\u0002\u0002\u032f\u0329\u0003",
    "\u0002\u0002\u0002\u032f\u032a\u0003\u0002\u0002\u0002\u032f\u032c\u0003",
    "\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u0330u\u0003",
    "\u0002\u0002\u0002\u0331\u0332\u00072\u0002\u0002\u0332\u0333\u0005",
    "x=\u0002\u0333w\u0003\u0002\u0002\u0002\u0334\u0339\u0005z>\u0002\u0335",
    "\u0336\u0007<\u0002\u0002\u0336\u0338\u0005z>\u0002\u0337\u0335\u0003",
    "\u0002\u0002\u0002\u0338\u033b\u0003\u0002\u0002\u0002\u0339\u0337\u0003",
    "\u0002\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002\u033ay\u0003",
    "\u0002\u0002\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033c\u0341\u0005",
    "|?\u0002\u033d\u033e\u0007=\u0002\u0002\u033e\u0340\u0005|?\u0002\u033f",
    "\u033d\u0003\u0002\u0002\u0002\u0340\u0343\u0003\u0002\u0002\u0002\u0341",
    "\u033f\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0342",
    "{\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0344",
    "\u0349\u0005~@\u0002\u0345\u0346\u0007>\u0002\u0002\u0346\u0348\u0005",
    "~@\u0002\u0347\u0345\u0003\u0002\u0002\u0002\u0348\u034b\u0003\u0002",
    "\u0002\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u0349\u034a\u0003\u0002",
    "\u0002\u0002\u034a}\u0003\u0002\u0002\u0002\u034b\u0349\u0003\u0002",
    "\u0002\u0002\u034c\u0351\u0005\u0080A\u0002\u034d\u034e\t\u0004\u0002",
    "\u0002\u034e\u0350\u0005\u0080A\u0002\u034f\u034d\u0003\u0002\u0002",
    "\u0002\u0350\u0353\u0003\u0002\u0002\u0002\u0351\u034f\u0003\u0002\u0002",
    "\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u007f\u0003\u0002\u0002",
    "\u0002\u0353\u0351\u0003\u0002\u0002\u0002\u0354\u0359\u0005\u0082B",
    "\u0002\u0355\u0356\t\u0005\u0002\u0002\u0356\u0358\u0005\u0082B\u0002",
    "\u0357\u0355\u0003\u0002\u0002\u0002\u0358\u035b\u0003\u0002\u0002\u0002",
    "\u0359\u0357\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002",
    "\u035a\u0081\u0003\u0002\u0002\u0002\u035b\u0359\u0003\u0002\u0002\u0002",
    "\u035c\u0361\u0005\u0084C\u0002\u035d\u035e\t\u0006\u0002\u0002\u035e",
    "\u0360\u0005\u0084C\u0002\u035f\u035d\u0003\u0002\u0002\u0002\u0360",
    "\u0363\u0003\u0002\u0002\u0002\u0361\u035f\u0003\u0002\u0002\u0002\u0361",
    "\u0362\u0003\u0002\u0002\u0002\u0362\u0083\u0003\u0002\u0002\u0002\u0363",
    "\u0361\u0003\u0002\u0002\u0002\u0364\u0365\t\u0007\u0002\u0002\u0365",
    "\u0368\u0005\u0084C\u0002\u0366\u0368\u0005\u0086D\u0002\u0367\u0364",
    "\u0003\u0002\u0002\u0002\u0367\u0366\u0003\u0002\u0002\u0002\u0368\u0085",
    "\u0003\u0002\u0002\u0002\u0369\u036c\u0005\u0088E\u0002\u036a\u036b",
    "\u00078\u0002\u0002\u036b\u036d\u0005\u0084C\u0002\u036c\u036a\u0003",
    "\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d\u0087\u0003",
    "\u0002\u0002\u0002\u036e\u0370\u0007%\u0002\u0002\u036f\u036e\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0003",
    "\u0002\u0002\u0002\u0371\u0375\u0005\u008aF\u0002\u0372\u0374\u0005",
    "\u008eH\u0002\u0373\u0372\u0003\u0002\u0002\u0002\u0374\u0377\u0003",
    "\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0375\u0376\u0003",
    "\u0002\u0002\u0002\u0376\u0089\u0003\u0002\u0002\u0002\u0377\u0375\u0003",
    "\u0002\u0002\u0002\u0378\u037b\u00073\u0002\u0002\u0379\u037c\u0005",
    "\u00b0Y\u0002\u037a\u037c\u0005\u008cG\u0002\u037b\u0379\u0003\u0002",
    "\u0002\u0002\u037b\u037a\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002",
    "\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u0393\u00074",
    "\u0002\u0002\u037e\u0380\u0007:\u0002\u0002\u037f\u0381\u0005\u008c",
    "G\u0002\u0380\u037f\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002",
    "\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0393\u0007;",
    "\u0002\u0002\u0383\u0385\u0007G\u0002\u0002\u0384\u0386\u0005\u00a0",
    "Q\u0002\u0385\u0384\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002",
    "\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0393\u0007H",
    "\u0002\u0002\u0388\u0393\u0005\u00be`\u0002\u0389\u0393\u0005\u00b6",
    "\\\u0002\u038a\u038c\u0005\u00b4[\u0002\u038b\u038a\u0003\u0002\u0002",
    "\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d\u038b\u0003\u0002\u0002",
    "\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038e\u0393\u0003\u0002\u0002",
    "\u0002\u038f\u0393\u00071\u0002\u0002\u0390\u0393\u0005\u00bc_\u0002",
    "\u0391\u0393\u0005\u00ba^\u0002\u0392\u0378\u0003\u0002\u0002\u0002",
    "\u0392\u037e\u0003\u0002\u0002\u0002\u0392\u0383\u0003\u0002\u0002\u0002",
    "\u0392\u0388\u0003\u0002\u0002\u0002\u0392\u0389\u0003\u0002\u0002\u0002",
    "\u0392\u038b\u0003\u0002\u0002\u0002\u0392\u038f\u0003\u0002\u0002\u0002",
    "\u0392\u0390\u0003\u0002\u0002\u0002\u0392\u0391\u0003\u0002\u0002\u0002",
    "\u0393\u008b\u0003\u0002\u0002\u0002\u0394\u0397\u0005d3\u0002\u0395",
    "\u0397\u0005v<\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0396\u0395",
    "\u0003\u0002\u0002\u0002\u0397\u03a6\u0003\u0002\u0002\u0002\u0398\u03a7",
    "\u0005\u00aaV\u0002\u0399\u039c\u00075\u0002\u0002\u039a\u039d\u0005",
    "d3\u0002\u039b\u039d\u0005v<\u0002\u039c\u039a\u0003\u0002\u0002\u0002",
    "\u039c\u039b\u0003\u0002\u0002\u0002\u039d\u039f\u0003\u0002\u0002\u0002",
    "\u039e\u0399\u0003\u0002\u0002\u0002\u039f\u03a2\u0003\u0002\u0002\u0002",
    "\u03a0\u039e\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002",
    "\u03a1\u03a4\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002",
    "\u03a3\u03a5\u00075\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002",
    "\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a7\u0003\u0002\u0002\u0002",
    "\u03a6\u0398\u0003\u0002\u0002\u0002\u03a6\u03a0\u0003\u0002\u0002\u0002",
    "\u03a7\u008d\u0003\u0002\u0002\u0002\u03a8\u03ac\u0005\u0090I\u0002",
    "\u03a9\u03ac\u0005\u0092J\u0002\u03aa\u03ac\u0005\u0094K\u0002\u03ab",
    "\u03a8\u0003\u0002\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ab",
    "\u03aa\u0003\u0002\u0002\u0002\u03ac\u008f\u0003\u0002\u0002\u0002\u03ad",
    "\u03af\u00073\u0002\u0002\u03ae\u03b0\u0005\u00a4S\u0002\u03af\u03ae",
    "\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b1",
    "\u0003\u0002\u0002\u0002\u03b1\u03b2\u00074\u0002\u0002\u03b2\u0091",
    "\u0003\u0002\u0002\u0002\u03b3\u03b4\u0007:\u0002\u0002\u03b4\u03b5",
    "\u0005\u0096L\u0002\u03b5\u03b6\u0007;\u0002\u0002\u03b6\u0093\u0003",
    "\u0002\u0002\u0002\u03b7\u03b8\u00070\u0002\u0002\u03b8\u03b9\u0005",
    "\u00be`\u0002\u03b9\u0095\u0003\u0002\u0002\u0002\u03ba\u03bf\u0005",
    "\u0098M\u0002\u03bb\u03bc\u00075\u0002\u0002\u03bc\u03be\u0005\u0098",
    "M\u0002\u03bd\u03bb\u0003\u0002\u0002\u0002\u03be\u03c1\u0003\u0002",
    "\u0002\u0002\u03bf\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002",
    "\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002",
    "\u0002\u0002\u03c2\u03c4\u00075\u0002\u0002\u03c3\u03c2\u0003\u0002",
    "\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4\u0097\u0003\u0002",
    "\u0002\u0002\u03c5\u03d1\u0005d3\u0002\u03c6\u03c8\u0005d3\u0002\u03c7",
    "\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8",
    "\u03c9\u0003\u0002\u0002\u0002\u03c9\u03cb\u00076\u0002\u0002\u03ca",
    "\u03cc\u0005d3\u0002\u03cb\u03ca\u0003\u0002\u0002\u0002\u03cb\u03cc",
    "\u0003\u0002\u0002\u0002\u03cc\u03ce\u0003\u0002\u0002\u0002\u03cd\u03cf",
    "\u0005\u009aN\u0002\u03ce\u03cd\u0003\u0002\u0002\u0002\u03ce\u03cf",
    "\u0003\u0002\u0002\u0002\u03cf\u03d1\u0003\u0002\u0002\u0002\u03d0\u03c5",
    "\u0003\u0002\u0002\u0002\u03d0\u03c7\u0003\u0002\u0002\u0002\u03d1\u0099",
    "\u0003\u0002\u0002\u0002\u03d2\u03d4\u00076\u0002\u0002\u03d3\u03d5",
    "\u0005d3\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003",
    "\u0002\u0002\u0002\u03d5\u009b\u0003\u0002\u0002\u0002\u03d6\u03d9\u0005",
    "x=\u0002\u03d7\u03d9\u0005v<\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002",
    "\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d9\u03e1\u0003\u0002\u0002\u0002",
    "\u03da\u03dd\u00075\u0002\u0002\u03db\u03de\u0005x=\u0002\u03dc\u03de",
    "\u0005v<\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03dc\u0003",
    "\u0002\u0002\u0002\u03de\u03e0\u0003\u0002\u0002\u0002\u03df\u03da\u0003",
    "\u0002\u0002\u0002\u03e0\u03e3\u0003\u0002\u0002\u0002\u03e1\u03df\u0003",
    "\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e5\u0003",
    "\u0002\u0002\u0002\u03e3\u03e1\u0003\u0002\u0002\u0002\u03e4\u03e6\u0007",
    "5\u0002\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003",
    "\u0002\u0002\u0002\u03e6\u009d\u0003\u0002\u0002\u0002\u03e7\u03ec\u0005",
    "d3\u0002\u03e8\u03e9\u00075\u0002\u0002\u03e9\u03eb\u0005d3\u0002\u03ea",
    "\u03e8\u0003\u0002\u0002\u0002\u03eb\u03ee\u0003\u0002\u0002\u0002\u03ec",
    "\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed",
    "\u03f0\u0003\u0002\u0002\u0002\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ef",
    "\u03f1\u00075\u0002\u0002\u03f0\u03ef\u0003\u0002\u0002\u0002\u03f0",
    "\u03f1\u0003\u0002\u0002\u0002\u03f1\u009f\u0003\u0002\u0002\u0002\u03f2",
    "\u03f3\u0005d3\u0002\u03f3\u03f4\u00076\u0002\u0002\u03f4\u03f5\u0005",
    "d3\u0002\u03f5\u03f9\u0003\u0002\u0002\u0002\u03f6\u03f7\u00078\u0002",
    "\u0002\u03f7\u03f9\u0005x=\u0002\u03f8\u03f2\u0003\u0002\u0002\u0002",
    "\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f9\u040c\u0003\u0002\u0002\u0002",
    "\u03fa\u040d\u0005\u00aaV\u0002\u03fb\u0402\u00075\u0002\u0002\u03fc",
    "\u03fd\u0005d3\u0002\u03fd\u03fe\u00076\u0002\u0002\u03fe\u03ff\u0005",
    "d3\u0002\u03ff\u0403\u0003\u0002\u0002\u0002\u0400\u0401\u00078\u0002",
    "\u0002\u0401\u0403\u0005x=\u0002\u0402\u03fc\u0003\u0002\u0002\u0002",
    "\u0402\u0400\u0003\u0002\u0002\u0002\u0403\u0405\u0003\u0002\u0002\u0002",
    "\u0404\u03fb\u0003\u0002\u0002\u0002\u0405\u0408\u0003\u0002\u0002\u0002",
    "\u0406\u0404\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002",
    "\u0407\u040a\u0003\u0002\u0002\u0002\u0408\u0406\u0003\u0002\u0002\u0002",
    "\u0409\u040b\u00075\u0002\u0002\u040a\u0409\u0003\u0002\u0002\u0002",
    "\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040d\u0003\u0002\u0002\u0002",
    "\u040c\u03fa\u0003\u0002\u0002\u0002\u040c\u0406\u0003\u0002\u0002\u0002",
    "\u040d\u0423\u0003\u0002\u0002\u0002\u040e\u0411\u0005d3\u0002\u040f",
    "\u0411\u0005v<\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0410\u040f",
    "\u0003\u0002\u0002\u0002\u0411\u0420\u0003\u0002\u0002\u0002\u0412\u0421",
    "\u0005\u00aaV\u0002\u0413\u0416\u00075\u0002\u0002\u0414\u0417\u0005",
    "d3\u0002\u0415\u0417\u0005v<\u0002\u0416\u0414\u0003\u0002\u0002\u0002",
    "\u0416\u0415\u0003\u0002\u0002\u0002\u0417\u0419\u0003\u0002\u0002\u0002",
    "\u0418\u0413\u0003\u0002\u0002\u0002\u0419\u041c\u0003\u0002\u0002\u0002",
    "\u041a\u0418\u0003\u0002\u0002\u0002\u041a\u041b\u0003\u0002\u0002\u0002",
    "\u041b\u041e\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002",
    "\u041d\u041f\u00075\u0002\u0002\u041e\u041d\u0003\u0002\u0002\u0002",
    "\u041e\u041f\u0003\u0002\u0002\u0002\u041f\u0421\u0003\u0002\u0002\u0002",
    "\u0420\u0412\u0003\u0002\u0002\u0002\u0420\u041a\u0003\u0002\u0002\u0002",
    "\u0421\u0423\u0003\u0002\u0002\u0002\u0422\u03f8\u0003\u0002\u0002\u0002",
    "\u0422\u0410\u0003\u0002\u0002\u0002\u0423\u00a1\u0003\u0002\u0002\u0002",
    "\u0424\u0425\u0007\u001e\u0002\u0002\u0425\u042b\u0007\'\u0002\u0002",
    "\u0426\u0428\u00073\u0002\u0002\u0427\u0429\u0005\u00a4S\u0002\u0428",
    "\u0427\u0003\u0002\u0002\u0002\u0428\u0429\u0003\u0002\u0002\u0002\u0429",
    "\u042a\u0003\u0002\u0002\u0002\u042a\u042c\u00074\u0002\u0002\u042b",
    "\u0426\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002\u042c",
    "\u042d\u0003\u0002\u0002\u0002\u042d\u042e\u00076\u0002\u0002\u042e",
    "\u042f\u0005b2\u0002\u042f\u00a3\u0003\u0002\u0002\u0002\u0430\u0435",
    "\u0005\u00a6T\u0002\u0431\u0432\u00075\u0002\u0002\u0432\u0434\u0005",
    "\u00a6T\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0434\u0437\u0003",
    "\u0002\u0002\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0435\u0436\u0003",
    "\u0002\u0002\u0002\u0436\u0439\u0003\u0002\u0002\u0002\u0437\u0435\u0003",
    "\u0002\u0002\u0002\u0438\u043a\u00075\u0002\u0002\u0439\u0438\u0003",
    "\u0002\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u00a5\u0003",
    "\u0002\u0002\u0002\u043b\u043d\u0005d3\u0002\u043c\u043e\u0005\u00aa",
    "V\u0002\u043d\u043c\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002",
    "\u0002\u0002\u043e\u0448\u0003\u0002\u0002\u0002\u043f\u0440\u0005d",
    "3\u0002\u0440\u0441\u00079\u0002\u0002\u0441\u0442\u0005d3\u0002\u0442",
    "\u0448\u0003\u0002\u0002\u0002\u0443\u0444\u00078\u0002\u0002\u0444",
    "\u0448\u0005d3\u0002\u0445\u0446\u00072\u0002\u0002\u0446\u0448\u0005",
    "d3\u0002\u0447\u043b\u0003\u0002\u0002\u0002\u0447\u043f\u0003\u0002",
    "\u0002\u0002\u0447\u0443\u0003\u0002\u0002\u0002\u0447\u0445\u0003\u0002",
    "\u0002\u0002\u0448\u00a7\u0003\u0002\u0002\u0002\u0449\u044c\u0005\u00aa",
    "V\u0002\u044a\u044c\u0005\u00acW\u0002\u044b\u0449\u0003\u0002\u0002",
    "\u0002\u044b\u044a\u0003\u0002\u0002\u0002\u044c\u00a9\u0003\u0002\u0002",
    "\u0002\u044d\u044f\u0007$\u0002\u0002\u044e\u044d\u0003\u0002\u0002",
    "\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002",
    "\u0002\u0450\u0451\u0007\u0010\u0002\u0002\u0451\u0452\u0005\u009cO",
    "\u0002\u0452\u0453\u0007\u0011\u0002\u0002\u0453\u0455\u0005l7\u0002",
    "\u0454\u0456\u0005\u00a8U\u0002\u0455\u0454\u0003\u0002\u0002\u0002",
    "\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u00ab\u0003\u0002\u0002\u0002",
    "\u0457\u0458\u0007\f\u0002\u0002\u0458\u045a\u0005f4\u0002\u0459\u045b",
    "\u0005\u00a8U\u0002\u045a\u0459\u0003\u0002\u0002\u0002\u045a\u045b",
    "\u0003\u0002\u0002\u0002\u045b\u00ad\u0003\u0002\u0002\u0002\u045c\u045d",
    "\u0007\'\u0002\u0002\u045d\u00af\u0003\u0002\u0002\u0002\u045e\u0460",
    "\u0007\u001f\u0002\u0002\u045f\u0461\u0005\u00b2Z\u0002\u0460\u045f",
    "\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461\u00b1",
    "\u0003\u0002\u0002\u0002\u0462\u0463\u0007\u0006\u0002\u0002\u0463\u0466",
    "\u0005d3\u0002\u0464\u0466\u0005\u009eP\u0002\u0465\u0462\u0003\u0002",
    "\u0002\u0002\u0465\u0464\u0003\u0002\u0002\u0002\u0466\u00b3\u0003\u0002",
    "\u0002\u0002\u0467\u0468\t\b\u0002\u0002\u0468\u00b5\u0003\u0002\u0002",
    "\u0002\u0469\u046d\u0005\u00b8]\u0002\u046a\u046d\u0007.\u0002\u0002",
    "\u046b\u046d\u0007/\u0002\u0002\u046c\u0469\u0003\u0002\u0002\u0002",
    "\u046c\u046a\u0003\u0002\u0002\u0002\u046c\u046b\u0003\u0002\u0002\u0002",
    "\u046d\u00b7\u0003\u0002\u0002\u0002\u046e\u046f\t\t\u0002\u0002\u046f",
    "\u00b9\u0003\u0002\u0002\u0002\u0470\u0471\t\n\u0002\u0002\u0471\u00bb",
    "\u0003\u0002\u0002\u0002\u0472\u0473\u0007\u001b\u0002\u0002\u0473\u00bd",
    "\u0003\u0002\u0002\u0002\u0474\u0475\u0007\'\u0002\u0002\u0475\u00bf",
    "\u0003\u0002\u0002\u0002\u00a9\u00c5\u00c9\u00cb\u00d4\u00dd\u00e0\u00e7",
    "\u00ed\u00f7\u00fe\u0105\u010b\u010f\u0115\u011b\u011f\u0126\u0128\u012a",
    "\u012f\u0131\u0133\u0137\u013d\u0141\u0148\u014a\u014c\u0151\u0153\u0158",
    "\u015d\u0163\u0167\u016d\u0173\u0177\u017e\u0180\u0182\u0187\u0189\u018b",
    "\u018f\u0195\u0199\u01a0\u01a2\u01a4\u01a9\u01ab\u01b1\u01b8\u01bc\u01c8",
    "\u01cf\u01d4\u01d8\u01db\u01e1\u01e5\u01ea\u01ee\u01f2\u0200\u0208\u0210",
    "\u0212\u0216\u021f\u0226\u0228\u0231\u0236\u023b\u0242\u0246\u024d\u0255",
    "\u025e\u0267\u026e\u0279\u027f\u028c\u0292\u029b\u02a6\u02b1\u02b6\u02bb",
    "\u02c0\u02c8\u02d1\u02d7\u02d9\u02e1\u02e5\u02ed\u02f0\u02f4\u02f8\u02ff",
    "\u0309\u0311\u0317\u031f\u032f\u0339\u0341\u0349\u0351\u0359\u0361\u0367",
    "\u036c\u036f\u0375\u037b\u0380\u0385\u038d\u0392\u0396\u039c\u03a0\u03a4",
    "\u03a6\u03ab\u03af\u03bf\u03c3\u03c7\u03cb\u03ce\u03d0\u03d4\u03d8\u03dd",
    "\u03e1\u03e5\u03ec\u03f0\u03f8\u0402\u0406\u040a\u040c\u0410\u0416\u041a",
    "\u041e\u0420\u0422\u0428\u042b\u0435\u0439\u043d\u0447\u044b\u044e\u0455",
    "\u045a\u0460\u0465\u046c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'finally'", "'with'", "'except'", "'lambda'", "'or'", 
                     "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", 
                     "'class'", "'yield'", "'del'", "'pass'", "'continue'", 
                     "'break'", "'async'", "'await'", null, null, null, 
                     null, null, null, null, null, null, null, "'.'", "'...'", 
                     "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", 
                     "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//='" ];

var symbolicNames = [ null, "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                      "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                      "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", 
                      "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", 
                      "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", 
                      "CONTINUE", "BREAK", "ASYNC", "AWAIT", "NEWLINE", 
                      "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", 
                      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                      "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                      "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", 
                      "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", 
                      "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
                      "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ];

var ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "trailer", "paren_trailer", "bracket_trailer", "dot_trailer", 
                   "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg", "string_literal", "number_literal", 
                   "integer_literal", "boolean_literal", "none_literal", 
                   "identifier" ];

function Python3Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

Python3Parser.prototype = Object.create(antlr4.Parser.prototype);
Python3Parser.prototype.constructor = Python3Parser;

Object.defineProperty(Python3Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

Python3Parser.EOF = antlr4.Token.EOF;
Python3Parser.DEF = 1;
Python3Parser.RETURN = 2;
Python3Parser.RAISE = 3;
Python3Parser.FROM = 4;
Python3Parser.IMPORT = 5;
Python3Parser.AS = 6;
Python3Parser.GLOBAL = 7;
Python3Parser.NONLOCAL = 8;
Python3Parser.ASSERT = 9;
Python3Parser.IF = 10;
Python3Parser.ELIF = 11;
Python3Parser.ELSE = 12;
Python3Parser.WHILE = 13;
Python3Parser.FOR = 14;
Python3Parser.IN = 15;
Python3Parser.TRY = 16;
Python3Parser.FINALLY = 17;
Python3Parser.WITH = 18;
Python3Parser.EXCEPT = 19;
Python3Parser.LAMBDA = 20;
Python3Parser.OR = 21;
Python3Parser.AND = 22;
Python3Parser.NOT = 23;
Python3Parser.IS = 24;
Python3Parser.NONE = 25;
Python3Parser.TRUE = 26;
Python3Parser.FALSE = 27;
Python3Parser.CLASS = 28;
Python3Parser.YIELD = 29;
Python3Parser.DEL = 30;
Python3Parser.PASS = 31;
Python3Parser.CONTINUE = 32;
Python3Parser.BREAK = 33;
Python3Parser.ASYNC = 34;
Python3Parser.AWAIT = 35;
Python3Parser.NEWLINE = 36;
Python3Parser.NAME = 37;
Python3Parser.STRING_LITERAL = 38;
Python3Parser.BYTES_LITERAL = 39;
Python3Parser.DECIMAL_INTEGER = 40;
Python3Parser.OCT_INTEGER = 41;
Python3Parser.HEX_INTEGER = 42;
Python3Parser.BIN_INTEGER = 43;
Python3Parser.FLOAT_NUMBER = 44;
Python3Parser.IMAG_NUMBER = 45;
Python3Parser.DOT = 46;
Python3Parser.ELLIPSIS = 47;
Python3Parser.STAR = 48;
Python3Parser.OPEN_PAREN = 49;
Python3Parser.CLOSE_PAREN = 50;
Python3Parser.COMMA = 51;
Python3Parser.COLON = 52;
Python3Parser.SEMI_COLON = 53;
Python3Parser.POWER = 54;
Python3Parser.ASSIGN = 55;
Python3Parser.OPEN_BRACK = 56;
Python3Parser.CLOSE_BRACK = 57;
Python3Parser.OR_OP = 58;
Python3Parser.XOR = 59;
Python3Parser.AND_OP = 60;
Python3Parser.LEFT_SHIFT = 61;
Python3Parser.RIGHT_SHIFT = 62;
Python3Parser.ADD = 63;
Python3Parser.MINUS = 64;
Python3Parser.DIV = 65;
Python3Parser.MOD = 66;
Python3Parser.IDIV = 67;
Python3Parser.NOT_OP = 68;
Python3Parser.OPEN_BRACE = 69;
Python3Parser.CLOSE_BRACE = 70;
Python3Parser.LESS_THAN = 71;
Python3Parser.GREATER_THAN = 72;
Python3Parser.EQUALS = 73;
Python3Parser.GT_EQ = 74;
Python3Parser.LT_EQ = 75;
Python3Parser.NOT_EQ_1 = 76;
Python3Parser.NOT_EQ_2 = 77;
Python3Parser.AT = 78;
Python3Parser.ARROW = 79;
Python3Parser.ADD_ASSIGN = 80;
Python3Parser.SUB_ASSIGN = 81;
Python3Parser.MULT_ASSIGN = 82;
Python3Parser.AT_ASSIGN = 83;
Python3Parser.DIV_ASSIGN = 84;
Python3Parser.MOD_ASSIGN = 85;
Python3Parser.AND_ASSIGN = 86;
Python3Parser.OR_ASSIGN = 87;
Python3Parser.XOR_ASSIGN = 88;
Python3Parser.LEFT_SHIFT_ASSIGN = 89;
Python3Parser.RIGHT_SHIFT_ASSIGN = 90;
Python3Parser.POWER_ASSIGN = 91;
Python3Parser.IDIV_ASSIGN = 92;
Python3Parser.SKIP_ = 93;
Python3Parser.UNKNOWN_CHAR = 94;
Python3Parser.INDENT = 95;
Python3Parser.DEDENT = 96;

Python3Parser.RULE_single_input = 0;
Python3Parser.RULE_file_input = 1;
Python3Parser.RULE_eval_input = 2;
Python3Parser.RULE_decorator = 3;
Python3Parser.RULE_decorators = 4;
Python3Parser.RULE_decorated = 5;
Python3Parser.RULE_async_funcdef = 6;
Python3Parser.RULE_funcdef = 7;
Python3Parser.RULE_parameters = 8;
Python3Parser.RULE_typedargslist = 9;
Python3Parser.RULE_tfpdef = 10;
Python3Parser.RULE_varargslist = 11;
Python3Parser.RULE_vfpdef = 12;
Python3Parser.RULE_stmt = 13;
Python3Parser.RULE_simple_stmt = 14;
Python3Parser.RULE_small_stmt = 15;
Python3Parser.RULE_expr_stmt = 16;
Python3Parser.RULE_annassign = 17;
Python3Parser.RULE_testlist_star_expr = 18;
Python3Parser.RULE_augassign = 19;
Python3Parser.RULE_del_stmt = 20;
Python3Parser.RULE_pass_stmt = 21;
Python3Parser.RULE_flow_stmt = 22;
Python3Parser.RULE_break_stmt = 23;
Python3Parser.RULE_continue_stmt = 24;
Python3Parser.RULE_return_stmt = 25;
Python3Parser.RULE_yield_stmt = 26;
Python3Parser.RULE_raise_stmt = 27;
Python3Parser.RULE_import_stmt = 28;
Python3Parser.RULE_import_name = 29;
Python3Parser.RULE_import_from = 30;
Python3Parser.RULE_import_as_name = 31;
Python3Parser.RULE_dotted_as_name = 32;
Python3Parser.RULE_import_as_names = 33;
Python3Parser.RULE_dotted_as_names = 34;
Python3Parser.RULE_dotted_name = 35;
Python3Parser.RULE_global_stmt = 36;
Python3Parser.RULE_nonlocal_stmt = 37;
Python3Parser.RULE_assert_stmt = 38;
Python3Parser.RULE_compound_stmt = 39;
Python3Parser.RULE_async_stmt = 40;
Python3Parser.RULE_if_stmt = 41;
Python3Parser.RULE_while_stmt = 42;
Python3Parser.RULE_for_stmt = 43;
Python3Parser.RULE_try_stmt = 44;
Python3Parser.RULE_with_stmt = 45;
Python3Parser.RULE_with_item = 46;
Python3Parser.RULE_except_clause = 47;
Python3Parser.RULE_suite = 48;
Python3Parser.RULE_test = 49;
Python3Parser.RULE_test_nocond = 50;
Python3Parser.RULE_lambdef = 51;
Python3Parser.RULE_lambdef_nocond = 52;
Python3Parser.RULE_or_test = 53;
Python3Parser.RULE_and_test = 54;
Python3Parser.RULE_not_test = 55;
Python3Parser.RULE_comparison = 56;
Python3Parser.RULE_comp_op = 57;
Python3Parser.RULE_star_expr = 58;
Python3Parser.RULE_expr = 59;
Python3Parser.RULE_xor_expr = 60;
Python3Parser.RULE_and_expr = 61;
Python3Parser.RULE_shift_expr = 62;
Python3Parser.RULE_arith_expr = 63;
Python3Parser.RULE_term = 64;
Python3Parser.RULE_factor = 65;
Python3Parser.RULE_power = 66;
Python3Parser.RULE_atom_expr = 67;
Python3Parser.RULE_atom = 68;
Python3Parser.RULE_testlist_comp = 69;
Python3Parser.RULE_trailer = 70;
Python3Parser.RULE_paren_trailer = 71;
Python3Parser.RULE_bracket_trailer = 72;
Python3Parser.RULE_dot_trailer = 73;
Python3Parser.RULE_subscriptlist = 74;
Python3Parser.RULE_subscript = 75;
Python3Parser.RULE_sliceop = 76;
Python3Parser.RULE_exprlist = 77;
Python3Parser.RULE_testlist = 78;
Python3Parser.RULE_dictorsetmaker = 79;
Python3Parser.RULE_classdef = 80;
Python3Parser.RULE_arglist = 81;
Python3Parser.RULE_argument = 82;
Python3Parser.RULE_comp_iter = 83;
Python3Parser.RULE_comp_for = 84;
Python3Parser.RULE_comp_if = 85;
Python3Parser.RULE_encoding_decl = 86;
Python3Parser.RULE_yield_expr = 87;
Python3Parser.RULE_yield_arg = 88;
Python3Parser.RULE_string_literal = 89;
Python3Parser.RULE_number_literal = 90;
Python3Parser.RULE_integer_literal = 91;
Python3Parser.RULE_boolean_literal = 92;
Python3Parser.RULE_none_literal = 93;
Python3Parser.RULE_identifier = 94;

function Single_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_single_input;
    return this;
}

Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;

Single_inputContext.prototype.NEWLINE = function() {
    return this.getToken(Python3Parser.NEWLINE, 0);
};

Single_inputContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

Single_inputContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

Single_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSingle_input(this);
	}
};

Single_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSingle_input(this);
	}
};

Single_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSingle_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Single_inputContext = Single_inputContext;

Python3Parser.prototype.single_input = function() {

    var localctx = new Single_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, Python3Parser.RULE_single_input);
    try {
        this.state = 195;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NEWLINE:
            this.enterOuterAlt(localctx, 1);
            this.state = 190;
            this.match(Python3Parser.NEWLINE);
            break;
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 191;
            this.simple_stmt();
            break;
        case Python3Parser.DEF:
        case Python3Parser.IF:
        case Python3Parser.WHILE:
        case Python3Parser.FOR:
        case Python3Parser.TRY:
        case Python3Parser.WITH:
        case Python3Parser.CLASS:
        case Python3Parser.ASYNC:
        case Python3Parser.AT:
            this.enterOuterAlt(localctx, 3);
            this.state = 192;
            this.compound_stmt();
            this.state = 193;
            this.match(Python3Parser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_file_input;
    return this;
}

File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;

File_inputContext.prototype.EOF = function() {
    return this.getToken(Python3Parser.EOF, 0);
};

File_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NEWLINE);
    } else {
        return this.getToken(Python3Parser.NEWLINE, i);
    }
};


File_inputContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

File_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterFile_input(this);
	}
};

File_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitFile_input(this);
	}
};

File_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitFile_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.File_inputContext = File_inputContext;

Python3Parser.prototype.file_input = function() {

    var localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, Python3Parser.RULE_file_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Python3Parser.CONTINUE - 32)) | (1 << (Python3Parser.BREAK - 32)) | (1 << (Python3Parser.ASYNC - 32)) | (1 << (Python3Parser.AWAIT - 32)) | (1 << (Python3Parser.NEWLINE - 32)) | (1 << (Python3Parser.NAME - 32)) | (1 << (Python3Parser.STRING_LITERAL - 32)) | (1 << (Python3Parser.BYTES_LITERAL - 32)) | (1 << (Python3Parser.DECIMAL_INTEGER - 32)) | (1 << (Python3Parser.OCT_INTEGER - 32)) | (1 << (Python3Parser.HEX_INTEGER - 32)) | (1 << (Python3Parser.BIN_INTEGER - 32)) | (1 << (Python3Parser.FLOAT_NUMBER - 32)) | (1 << (Python3Parser.IMAG_NUMBER - 32)) | (1 << (Python3Parser.ELLIPSIS - 32)) | (1 << (Python3Parser.STAR - 32)) | (1 << (Python3Parser.OPEN_PAREN - 32)) | (1 << (Python3Parser.OPEN_BRACK - 32)) | (1 << (Python3Parser.ADD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)))) !== 0)) {
            this.state = 199;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.NEWLINE:
                this.state = 197;
                this.match(Python3Parser.NEWLINE);
                break;
            case Python3Parser.DEF:
            case Python3Parser.RETURN:
            case Python3Parser.RAISE:
            case Python3Parser.FROM:
            case Python3Parser.IMPORT:
            case Python3Parser.GLOBAL:
            case Python3Parser.NONLOCAL:
            case Python3Parser.ASSERT:
            case Python3Parser.IF:
            case Python3Parser.WHILE:
            case Python3Parser.FOR:
            case Python3Parser.TRY:
            case Python3Parser.WITH:
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.CLASS:
            case Python3Parser.YIELD:
            case Python3Parser.DEL:
            case Python3Parser.PASS:
            case Python3Parser.CONTINUE:
            case Python3Parser.BREAK:
            case Python3Parser.ASYNC:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.STAR:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
            case Python3Parser.AT:
                this.state = 198;
                this.stmt();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 203;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 204;
        this.match(Python3Parser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Eval_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_eval_input;
    return this;
}

Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;

Eval_inputContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Eval_inputContext.prototype.EOF = function() {
    return this.getToken(Python3Parser.EOF, 0);
};

Eval_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NEWLINE);
    } else {
        return this.getToken(Python3Parser.NEWLINE, i);
    }
};


Eval_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterEval_input(this);
	}
};

Eval_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitEval_input(this);
	}
};

Eval_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitEval_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Eval_inputContext = Eval_inputContext;

Python3Parser.prototype.eval_input = function() {

    var localctx = new Eval_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, Python3Parser.RULE_eval_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 206;
        this.testlist();
        this.state = 210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.NEWLINE) {
            this.state = 207;
            this.match(Python3Parser.NEWLINE);
            this.state = 212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 213;
        this.match(Python3Parser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorator;
    return this;
}

DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;

DecoratorContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

DecoratorContext.prototype.NEWLINE = function() {
    return this.getToken(Python3Parser.NEWLINE, 0);
};

DecoratorContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

DecoratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDecorator(this);
	}
};

DecoratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDecorator(this);
	}
};

DecoratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDecorator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.DecoratorContext = DecoratorContext;

Python3Parser.prototype.decorator = function() {

    var localctx = new DecoratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, Python3Parser.RULE_decorator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 215;
        this.match(Python3Parser.AT);
        this.state = 216;
        this.dotted_name();
        this.state = 222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.OPEN_PAREN) {
            this.state = 217;
            this.match(Python3Parser.OPEN_PAREN);
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (Python3Parser.POWER - 54)) | (1 << (Python3Parser.OPEN_BRACK - 54)) | (1 << (Python3Parser.ADD - 54)) | (1 << (Python3Parser.MINUS - 54)) | (1 << (Python3Parser.NOT_OP - 54)) | (1 << (Python3Parser.OPEN_BRACE - 54)))) !== 0)) {
                this.state = 218;
                this.arglist();
            }

            this.state = 221;
            this.match(Python3Parser.CLOSE_PAREN);
        }

        this.state = 224;
        this.match(Python3Parser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorators;
    return this;
}

DecoratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorsContext.prototype.constructor = DecoratorsContext;

DecoratorsContext.prototype.decorator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecoratorContext);
    } else {
        return this.getTypedRuleContext(DecoratorContext,i);
    }
};

DecoratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDecorators(this);
	}
};

DecoratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDecorators(this);
	}
};

DecoratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDecorators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.DecoratorsContext = DecoratorsContext;

Python3Parser.prototype.decorators = function() {

    var localctx = new DecoratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, Python3Parser.RULE_decorators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 227; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 226;
            this.decorator();
            this.state = 229; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===Python3Parser.AT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_decorated;
    return this;
}

DecoratedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratedContext.prototype.constructor = DecoratedContext;

DecoratedContext.prototype.decorators = function() {
    return this.getTypedRuleContext(DecoratorsContext,0);
};

DecoratedContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

DecoratedContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

DecoratedContext.prototype.async_funcdef = function() {
    return this.getTypedRuleContext(Async_funcdefContext,0);
};

DecoratedContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDecorated(this);
	}
};

DecoratedContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDecorated(this);
	}
};

DecoratedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDecorated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.DecoratedContext = DecoratedContext;

Python3Parser.prototype.decorated = function() {

    var localctx = new DecoratedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, Python3Parser.RULE_decorated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this.decorators();
        this.state = 235;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.CLASS:
            this.state = 232;
            this.classdef();
            break;
        case Python3Parser.DEF:
            this.state = 233;
            this.funcdef();
            break;
        case Python3Parser.ASYNC:
            this.state = 234;
            this.async_funcdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_funcdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_async_funcdef;
    return this;
}

Async_funcdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_funcdefContext.prototype.constructor = Async_funcdefContext;

Async_funcdefContext.prototype.ASYNC = function() {
    return this.getToken(Python3Parser.ASYNC, 0);
};

Async_funcdefContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_funcdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAsync_funcdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Async_funcdefContext = Async_funcdefContext;

Python3Parser.prototype.async_funcdef = function() {

    var localctx = new Async_funcdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, Python3Parser.RULE_async_funcdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 237;
        this.match(Python3Parser.ASYNC);
        this.state = 238;
        this.funcdef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_funcdef;
    return this;
}

FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;

FuncdefContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

FuncdefContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FuncdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

FuncdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

FuncdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterFuncdef(this);
	}
};

FuncdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitFuncdef(this);
	}
};

FuncdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitFuncdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.FuncdefContext = FuncdefContext;

Python3Parser.prototype.funcdef = function() {

    var localctx = new FuncdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, Python3Parser.RULE_funcdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(Python3Parser.DEF);
        this.state = 241;
        this.match(Python3Parser.NAME);
        this.state = 242;
        this.parameters();
        this.state = 245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ARROW) {
            this.state = 243;
            this.match(Python3Parser.ARROW);
            this.state = 244;
            this.test();
        }

        this.state = 247;
        this.match(Python3Parser.COLON);
        this.state = 248;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.typedargslist = function() {
    return this.getTypedRuleContext(TypedargslistContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitParameters(this);
	}
};

ParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ParametersContext = ParametersContext;

Python3Parser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, Python3Parser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 250;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Python3Parser.NAME - 37)) | (1 << (Python3Parser.STAR - 37)) | (1 << (Python3Parser.POWER - 37)))) !== 0)) {
            this.state = 251;
            this.typedargslist();
        }

        this.state = 254;
        this.match(Python3Parser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_typedargslist;
    return this;
}

TypedargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedargslistContext.prototype.constructor = TypedargslistContext;

TypedargslistContext.prototype.tfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TfpdefContext);
    } else {
        return this.getTypedRuleContext(TfpdefContext,i);
    }
};

TypedargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TypedargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTypedargslist(this);
	}
};

TypedargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTypedargslist(this);
	}
};

TypedargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTypedargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TypedargslistContext = TypedargslistContext;

Python3Parser.prototype.typedargslist = function() {

    var localctx = new TypedargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, Python3Parser.RULE_typedargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NAME:
            this.state = 256;
            this.tfpdef();
            this.state = 259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.ASSIGN) {
                this.state = 257;
                this.match(Python3Parser.ASSIGN);
                this.state = 258;
                this.test();
            }

            this.state = 269;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 261;
                    this.match(Python3Parser.COMMA);
                    this.state = 262;
                    this.tfpdef();
                    this.state = 265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.ASSIGN) {
                        this.state = 263;
                        this.match(Python3Parser.ASSIGN);
                        this.state = 264;
                        this.test();
                    }
             
                }
                this.state = 271;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
            }

            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 272;
                this.match(Python3Parser.COMMA);
                this.state = 303;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case Python3Parser.STAR:
                	this.state = 273;
                	this.match(Python3Parser.STAR);
                	this.state = 275;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.NAME) {
                	    this.state = 274;
                	    this.tfpdef();
                	}

                	this.state = 285;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 277;
                	        this.match(Python3Parser.COMMA);
                	        this.state = 278;
                	        this.tfpdef();
                	        this.state = 281;
                	        this._errHandler.sync(this);
                	        _la = this._input.LA(1);
                	        if(_la===Python3Parser.ASSIGN) {
                	            this.state = 279;
                	            this.match(Python3Parser.ASSIGN);
                	            this.state = 280;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 287;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
                	}

                	this.state = 296;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.COMMA) {
                	    this.state = 288;
                	    this.match(Python3Parser.COMMA);
                	    this.state = 294;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	    if(_la===Python3Parser.POWER) {
                	        this.state = 289;
                	        this.match(Python3Parser.POWER);
                	        this.state = 290;
                	        this.tfpdef();
                	        this.state = 292;
                	        this._errHandler.sync(this);
                	        _la = this._input.LA(1);
                	        if(_la===Python3Parser.COMMA) {
                	            this.state = 291;
                	            this.match(Python3Parser.COMMA);
                	        }

                	    }

                	}

                	break;
                case Python3Parser.POWER:
                	this.state = 298;
                	this.match(Python3Parser.POWER);
                	this.state = 299;
                	this.tfpdef();
                	this.state = 301;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.COMMA) {
                	    this.state = 300;
                	    this.match(Python3Parser.COMMA);
                	}

                	break;
                case Python3Parser.CLOSE_PAREN:
                	break;
                default:
                	break;
                }
            }

            break;
        case Python3Parser.STAR:
            this.state = 307;
            this.match(Python3Parser.STAR);
            this.state = 309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.NAME) {
                this.state = 308;
                this.tfpdef();
            }

            this.state = 319;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 311;
                    this.match(Python3Parser.COMMA);
                    this.state = 312;
                    this.tfpdef();
                    this.state = 315;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.ASSIGN) {
                        this.state = 313;
                        this.match(Python3Parser.ASSIGN);
                        this.state = 314;
                        this.test();
                    }
             
                }
                this.state = 321;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 322;
                this.match(Python3Parser.COMMA);
                this.state = 328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===Python3Parser.POWER) {
                    this.state = 323;
                    this.match(Python3Parser.POWER);
                    this.state = 324;
                    this.tfpdef();
                    this.state = 326;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.COMMA) {
                        this.state = 325;
                        this.match(Python3Parser.COMMA);
                    }

                }

            }

            break;
        case Python3Parser.POWER:
            this.state = 332;
            this.match(Python3Parser.POWER);
            this.state = 333;
            this.tfpdef();
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 334;
                this.match(Python3Parser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_tfpdef;
    return this;
}

TfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TfpdefContext.prototype.constructor = TfpdefContext;

TfpdefContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

TfpdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTfpdef(this);
	}
};

TfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTfpdef(this);
	}
};

TfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TfpdefContext = TfpdefContext;

Python3Parser.prototype.tfpdef = function() {

    var localctx = new TfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, Python3Parser.RULE_tfpdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(Python3Parser.NAME);
        this.state = 342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COLON) {
            this.state = 340;
            this.match(Python3Parser.COLON);
            this.state = 341;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_varargslist;
    return this;
}

VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;

VarargslistContext.prototype.vfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VfpdefContext);
    } else {
        return this.getTypedRuleContext(VfpdefContext,i);
    }
};

VarargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

VarargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterVarargslist(this);
	}
};

VarargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitVarargslist(this);
	}
};

VarargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitVarargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.VarargslistContext = VarargslistContext;

Python3Parser.prototype.varargslist = function() {

    var localctx = new VarargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, Python3Parser.RULE_varargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NAME:
            this.state = 344;
            this.vfpdef();
            this.state = 347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.ASSIGN) {
                this.state = 345;
                this.match(Python3Parser.ASSIGN);
                this.state = 346;
                this.test();
            }

            this.state = 357;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 349;
                    this.match(Python3Parser.COMMA);
                    this.state = 350;
                    this.vfpdef();
                    this.state = 353;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.ASSIGN) {
                        this.state = 351;
                        this.match(Python3Parser.ASSIGN);
                        this.state = 352;
                        this.test();
                    }
             
                }
                this.state = 359;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
            }

            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 360;
                this.match(Python3Parser.COMMA);
                this.state = 391;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case Python3Parser.STAR:
                	this.state = 361;
                	this.match(Python3Parser.STAR);
                	this.state = 363;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.NAME) {
                	    this.state = 362;
                	    this.vfpdef();
                	}

                	this.state = 373;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 365;
                	        this.match(Python3Parser.COMMA);
                	        this.state = 366;
                	        this.vfpdef();
                	        this.state = 369;
                	        this._errHandler.sync(this);
                	        _la = this._input.LA(1);
                	        if(_la===Python3Parser.ASSIGN) {
                	            this.state = 367;
                	            this.match(Python3Parser.ASSIGN);
                	            this.state = 368;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 375;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
                	}

                	this.state = 384;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.COMMA) {
                	    this.state = 376;
                	    this.match(Python3Parser.COMMA);
                	    this.state = 382;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	    if(_la===Python3Parser.POWER) {
                	        this.state = 377;
                	        this.match(Python3Parser.POWER);
                	        this.state = 378;
                	        this.vfpdef();
                	        this.state = 380;
                	        this._errHandler.sync(this);
                	        _la = this._input.LA(1);
                	        if(_la===Python3Parser.COMMA) {
                	            this.state = 379;
                	            this.match(Python3Parser.COMMA);
                	        }

                	    }

                	}

                	break;
                case Python3Parser.POWER:
                	this.state = 386;
                	this.match(Python3Parser.POWER);
                	this.state = 387;
                	this.vfpdef();
                	this.state = 389;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===Python3Parser.COMMA) {
                	    this.state = 388;
                	    this.match(Python3Parser.COMMA);
                	}

                	break;
                case Python3Parser.COLON:
                	break;
                default:
                	break;
                }
            }

            break;
        case Python3Parser.STAR:
            this.state = 395;
            this.match(Python3Parser.STAR);
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.NAME) {
                this.state = 396;
                this.vfpdef();
            }

            this.state = 407;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 399;
                    this.match(Python3Parser.COMMA);
                    this.state = 400;
                    this.vfpdef();
                    this.state = 403;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.ASSIGN) {
                        this.state = 401;
                        this.match(Python3Parser.ASSIGN);
                        this.state = 402;
                        this.test();
                    }
             
                }
                this.state = 409;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
            }

            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 410;
                this.match(Python3Parser.COMMA);
                this.state = 416;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===Python3Parser.POWER) {
                    this.state = 411;
                    this.match(Python3Parser.POWER);
                    this.state = 412;
                    this.vfpdef();
                    this.state = 414;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Python3Parser.COMMA) {
                        this.state = 413;
                        this.match(Python3Parser.COMMA);
                    }

                }

            }

            break;
        case Python3Parser.POWER:
            this.state = 420;
            this.match(Python3Parser.POWER);
            this.state = 421;
            this.vfpdef();
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 422;
                this.match(Python3Parser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_vfpdef;
    return this;
}

VfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VfpdefContext.prototype.constructor = VfpdefContext;

VfpdefContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

VfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterVfpdef(this);
	}
};

VfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitVfpdef(this);
	}
};

VfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitVfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.VfpdefContext = VfpdefContext;

Python3Parser.prototype.vfpdef = function() {

    var localctx = new VfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, Python3Parser.RULE_vfpdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(Python3Parser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

StmtContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.StmtContext = StmtContext;

Python3Parser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, Python3Parser.RULE_stmt);
    try {
        this.state = 431;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 429;
            this.simple_stmt();
            break;
        case Python3Parser.DEF:
        case Python3Parser.IF:
        case Python3Parser.WHILE:
        case Python3Parser.FOR:
        case Python3Parser.TRY:
        case Python3Parser.WITH:
        case Python3Parser.CLASS:
        case Python3Parser.ASYNC:
        case Python3Parser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 430;
            this.compound_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_simple_stmt;
    return this;
}

Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;

Simple_stmtContext.prototype.small_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Small_stmtContext);
    } else {
        return this.getTypedRuleContext(Small_stmtContext,i);
    }
};

Simple_stmtContext.prototype.NEWLINE = function() {
    return this.getToken(Python3Parser.NEWLINE, 0);
};

Simple_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSimple_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Simple_stmtContext = Simple_stmtContext;

Python3Parser.prototype.simple_stmt = function() {

    var localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, Python3Parser.RULE_simple_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.small_stmt();
        this.state = 438;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 434;
                this.match(Python3Parser.SEMI_COLON);
                this.state = 435;
                this.small_stmt(); 
            }
            this.state = 440;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

        this.state = 442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.SEMI_COLON) {
            this.state = 441;
            this.match(Python3Parser.SEMI_COLON);
        }

        this.state = 444;
        this.match(Python3Parser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Small_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_small_stmt;
    return this;
}

Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;

Small_stmtContext.prototype.expr_stmt = function() {
    return this.getTypedRuleContext(Expr_stmtContext,0);
};

Small_stmtContext.prototype.del_stmt = function() {
    return this.getTypedRuleContext(Del_stmtContext,0);
};

Small_stmtContext.prototype.pass_stmt = function() {
    return this.getTypedRuleContext(Pass_stmtContext,0);
};

Small_stmtContext.prototype.flow_stmt = function() {
    return this.getTypedRuleContext(Flow_stmtContext,0);
};

Small_stmtContext.prototype.import_stmt = function() {
    return this.getTypedRuleContext(Import_stmtContext,0);
};

Small_stmtContext.prototype.global_stmt = function() {
    return this.getTypedRuleContext(Global_stmtContext,0);
};

Small_stmtContext.prototype.nonlocal_stmt = function() {
    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
};

Small_stmtContext.prototype.assert_stmt = function() {
    return this.getTypedRuleContext(Assert_stmtContext,0);
};

Small_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSmall_stmt(this);
	}
};

Small_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSmall_stmt(this);
	}
};

Small_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSmall_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Small_stmtContext = Small_stmtContext;

Python3Parser.prototype.small_stmt = function() {

    var localctx = new Small_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, Python3Parser.RULE_small_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.state = 446;
            this.expr_stmt();
            break;
        case Python3Parser.DEL:
            this.state = 447;
            this.del_stmt();
            break;
        case Python3Parser.PASS:
            this.state = 448;
            this.pass_stmt();
            break;
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.YIELD:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
            this.state = 449;
            this.flow_stmt();
            break;
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
            this.state = 450;
            this.import_stmt();
            break;
        case Python3Parser.GLOBAL:
            this.state = 451;
            this.global_stmt();
            break;
        case Python3Parser.NONLOCAL:
            this.state = 452;
            this.nonlocal_stmt();
            break;
        case Python3Parser.ASSERT:
            this.state = 453;
            this.assert_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expr_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_expr_stmt;
    return this;
}

Expr_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;

Expr_stmtContext.prototype.testlist_star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Testlist_star_exprContext);
    } else {
        return this.getTypedRuleContext(Testlist_star_exprContext,i);
    }
};

Expr_stmtContext.prototype.annassign = function() {
    return this.getTypedRuleContext(AnnassignContext,0);
};

Expr_stmtContext.prototype.augassign = function() {
    return this.getTypedRuleContext(AugassignContext,0);
};

Expr_stmtContext.prototype.yield_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Yield_exprContext);
    } else {
        return this.getTypedRuleContext(Yield_exprContext,i);
    }
};

Expr_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Expr_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitExpr_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Expr_stmtContext = Expr_stmtContext;

Python3Parser.prototype.expr_stmt = function() {

    var localctx = new Expr_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, Python3Parser.RULE_expr_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.testlist_star_expr();
        this.state = 473;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.COLON:
            this.state = 457;
            this.annassign();
            break;
        case Python3Parser.ADD_ASSIGN:
        case Python3Parser.SUB_ASSIGN:
        case Python3Parser.MULT_ASSIGN:
        case Python3Parser.AT_ASSIGN:
        case Python3Parser.DIV_ASSIGN:
        case Python3Parser.MOD_ASSIGN:
        case Python3Parser.AND_ASSIGN:
        case Python3Parser.OR_ASSIGN:
        case Python3Parser.XOR_ASSIGN:
        case Python3Parser.LEFT_SHIFT_ASSIGN:
        case Python3Parser.RIGHT_SHIFT_ASSIGN:
        case Python3Parser.POWER_ASSIGN:
        case Python3Parser.IDIV_ASSIGN:
            this.state = 458;
            this.augassign();
            this.state = 461;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.YIELD:
                this.state = 459;
                this.yield_expr();
                break;
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
                this.state = 460;
                this.testlist();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case Python3Parser.NEWLINE:
        case Python3Parser.SEMI_COLON:
        case Python3Parser.ASSIGN:
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Python3Parser.ASSIGN) {
                this.state = 463;
                this.match(Python3Parser.ASSIGN);
                this.state = 466;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Python3Parser.YIELD:
                    this.state = 464;
                    this.yield_expr();
                    break;
                case Python3Parser.LAMBDA:
                case Python3Parser.NOT:
                case Python3Parser.NONE:
                case Python3Parser.TRUE:
                case Python3Parser.FALSE:
                case Python3Parser.AWAIT:
                case Python3Parser.NAME:
                case Python3Parser.STRING_LITERAL:
                case Python3Parser.BYTES_LITERAL:
                case Python3Parser.DECIMAL_INTEGER:
                case Python3Parser.OCT_INTEGER:
                case Python3Parser.HEX_INTEGER:
                case Python3Parser.BIN_INTEGER:
                case Python3Parser.FLOAT_NUMBER:
                case Python3Parser.IMAG_NUMBER:
                case Python3Parser.ELLIPSIS:
                case Python3Parser.STAR:
                case Python3Parser.OPEN_PAREN:
                case Python3Parser.OPEN_BRACK:
                case Python3Parser.ADD:
                case Python3Parser.MINUS:
                case Python3Parser.NOT_OP:
                case Python3Parser.OPEN_BRACE:
                    this.state = 465;
                    this.testlist_star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_annassign;
    return this;
}

AnnassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnassignContext.prototype.constructor = AnnassignContext;

AnnassignContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

AnnassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAnnassign(this);
	}
};

AnnassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAnnassign(this);
	}
};

AnnassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAnnassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.AnnassignContext = AnnassignContext;

Python3Parser.prototype.annassign = function() {

    var localctx = new AnnassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, Python3Parser.RULE_annassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.match(Python3Parser.COLON);
        this.state = 476;
        this.test();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ASSIGN) {
            this.state = 477;
            this.match(Python3Parser.ASSIGN);
            this.state = 478;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
    return this;
}

Testlist_star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_star_exprContext.prototype.constructor = Testlist_star_exprContext;

Testlist_star_exprContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_star_exprContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTestlist_star_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext;

Python3Parser.prototype.testlist_star_expr = function() {

    var localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, Python3Parser.RULE_testlist_star_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.state = 481;
            this.test();
            break;
        case Python3Parser.STAR:
            this.state = 482;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 492;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 485;
                this.match(Python3Parser.COMMA);
                this.state = 488;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Python3Parser.LAMBDA:
                case Python3Parser.NOT:
                case Python3Parser.NONE:
                case Python3Parser.TRUE:
                case Python3Parser.FALSE:
                case Python3Parser.AWAIT:
                case Python3Parser.NAME:
                case Python3Parser.STRING_LITERAL:
                case Python3Parser.BYTES_LITERAL:
                case Python3Parser.DECIMAL_INTEGER:
                case Python3Parser.OCT_INTEGER:
                case Python3Parser.HEX_INTEGER:
                case Python3Parser.BIN_INTEGER:
                case Python3Parser.FLOAT_NUMBER:
                case Python3Parser.IMAG_NUMBER:
                case Python3Parser.ELLIPSIS:
                case Python3Parser.OPEN_PAREN:
                case Python3Parser.OPEN_BRACK:
                case Python3Parser.ADD:
                case Python3Parser.MINUS:
                case Python3Parser.NOT_OP:
                case Python3Parser.OPEN_BRACE:
                    this.state = 486;
                    this.test();
                    break;
                case Python3Parser.STAR:
                    this.state = 487;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 494;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 495;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AugassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_augassign;
    return this;
}

AugassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AugassignContext.prototype.constructor = AugassignContext;


AugassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAugassign(this);
	}
};

AugassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAugassign(this);
	}
};

AugassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAugassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.AugassignContext = AugassignContext;

Python3Parser.prototype.augassign = function() {

    var localctx = new AugassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, Python3Parser.RULE_augassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        _la = this._input.LA(1);
        if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (Python3Parser.ADD_ASSIGN - 80)) | (1 << (Python3Parser.SUB_ASSIGN - 80)) | (1 << (Python3Parser.MULT_ASSIGN - 80)) | (1 << (Python3Parser.AT_ASSIGN - 80)) | (1 << (Python3Parser.DIV_ASSIGN - 80)) | (1 << (Python3Parser.MOD_ASSIGN - 80)) | (1 << (Python3Parser.AND_ASSIGN - 80)) | (1 << (Python3Parser.OR_ASSIGN - 80)) | (1 << (Python3Parser.XOR_ASSIGN - 80)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 80)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 80)) | (1 << (Python3Parser.POWER_ASSIGN - 80)) | (1 << (Python3Parser.IDIV_ASSIGN - 80)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Del_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_del_stmt;
    return this;
}

Del_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;

Del_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Del_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDel_stmt(this);
	}
};

Del_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDel_stmt(this);
	}
};

Del_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDel_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Del_stmtContext = Del_stmtContext;

Python3Parser.prototype.del_stmt = function() {

    var localctx = new Del_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, Python3Parser.RULE_del_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.match(Python3Parser.DEL);
        this.state = 501;
        this.exprlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pass_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_pass_stmt;
    return this;
}

Pass_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;


Pass_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterPass_stmt(this);
	}
};

Pass_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitPass_stmt(this);
	}
};

Pass_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitPass_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Pass_stmtContext = Pass_stmtContext;

Python3Parser.prototype.pass_stmt = function() {

    var localctx = new Pass_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, Python3Parser.RULE_pass_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(Python3Parser.PASS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flow_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_flow_stmt;
    return this;
}

Flow_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flow_stmtContext.prototype.constructor = Flow_stmtContext;

Flow_stmtContext.prototype.break_stmt = function() {
    return this.getTypedRuleContext(Break_stmtContext,0);
};

Flow_stmtContext.prototype.continue_stmt = function() {
    return this.getTypedRuleContext(Continue_stmtContext,0);
};

Flow_stmtContext.prototype.return_stmt = function() {
    return this.getTypedRuleContext(Return_stmtContext,0);
};

Flow_stmtContext.prototype.raise_stmt = function() {
    return this.getTypedRuleContext(Raise_stmtContext,0);
};

Flow_stmtContext.prototype.yield_stmt = function() {
    return this.getTypedRuleContext(Yield_stmtContext,0);
};

Flow_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitFlow_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Flow_stmtContext = Flow_stmtContext;

Python3Parser.prototype.flow_stmt = function() {

    var localctx = new Flow_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, Python3Parser.RULE_flow_stmt);
    try {
        this.state = 510;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.BREAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 505;
            this.break_stmt();
            break;
        case Python3Parser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 506;
            this.continue_stmt();
            break;
        case Python3Parser.RETURN:
            this.enterOuterAlt(localctx, 3);
            this.state = 507;
            this.return_stmt();
            break;
        case Python3Parser.RAISE:
            this.enterOuterAlt(localctx, 4);
            this.state = 508;
            this.raise_stmt();
            break;
        case Python3Parser.YIELD:
            this.enterOuterAlt(localctx, 5);
            this.state = 509;
            this.yield_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_break_stmt;
    return this;
}

Break_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;


Break_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterBreak_stmt(this);
	}
};

Break_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitBreak_stmt(this);
	}
};

Break_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitBreak_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Break_stmtContext = Break_stmtContext;

Python3Parser.prototype.break_stmt = function() {

    var localctx = new Break_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, Python3Parser.RULE_break_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.match(Python3Parser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_continue_stmt;
    return this;
}

Continue_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;


Continue_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitContinue_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Continue_stmtContext = Continue_stmtContext;

Python3Parser.prototype.continue_stmt = function() {

    var localctx = new Continue_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, Python3Parser.RULE_continue_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 514;
        this.match(Python3Parser.CONTINUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_return_stmt;
    return this;
}

Return_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;

Return_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Return_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterReturn_stmt(this);
	}
};

Return_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitReturn_stmt(this);
	}
};

Return_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitReturn_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Return_stmtContext = Return_stmtContext;

Python3Parser.prototype.return_stmt = function() {

    var localctx = new Return_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, Python3Parser.RULE_return_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this.match(Python3Parser.RETURN);
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
            this.state = 517;
            this.testlist();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_stmt;
    return this;
}

Yield_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;

Yield_stmtContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

Yield_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterYield_stmt(this);
	}
};

Yield_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitYield_stmt(this);
	}
};

Yield_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitYield_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Yield_stmtContext = Yield_stmtContext;

Python3Parser.prototype.yield_stmt = function() {

    var localctx = new Yield_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, Python3Parser.RULE_yield_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.yield_expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_raise_stmt;
    return this;
}

Raise_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;

Raise_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Raise_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitRaise_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Raise_stmtContext = Raise_stmtContext;

Python3Parser.prototype.raise_stmt = function() {

    var localctx = new Raise_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, Python3Parser.RULE_raise_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.match(Python3Parser.RAISE);
        this.state = 528;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
            this.state = 523;
            this.test();
            this.state = 526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.FROM) {
                this.state = 524;
                this.match(Python3Parser.FROM);
                this.state = 525;
                this.test();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_stmt;
    return this;
}

Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;

Import_stmtContext.prototype.import_name = function() {
    return this.getTypedRuleContext(Import_nameContext,0);
};

Import_stmtContext.prototype.import_from = function() {
    return this.getTypedRuleContext(Import_fromContext,0);
};

Import_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterImport_stmt(this);
	}
};

Import_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitImport_stmt(this);
	}
};

Import_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitImport_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Import_stmtContext = Import_stmtContext;

Python3Parser.prototype.import_stmt = function() {

    var localctx = new Import_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, Python3Parser.RULE_import_stmt);
    try {
        this.state = 532;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.IMPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.import_name();
            break;
        case Python3Parser.FROM:
            this.enterOuterAlt(localctx, 2);
            this.state = 531;
            this.import_from();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_name;
    return this;
}

Import_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_nameContext.prototype.constructor = Import_nameContext;

Import_nameContext.prototype.dotted_as_names = function() {
    return this.getTypedRuleContext(Dotted_as_namesContext,0);
};

Import_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterImport_name(this);
	}
};

Import_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitImport_name(this);
	}
};

Import_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitImport_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Import_nameContext = Import_nameContext;

Python3Parser.prototype.import_name = function() {

    var localctx = new Import_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, Python3Parser.RULE_import_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(Python3Parser.IMPORT);
        this.state = 535;
        this.dotted_as_names();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_from;
    return this;
}

Import_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_fromContext.prototype.constructor = Import_fromContext;

Import_fromContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Import_fromContext.prototype.import_as_names = function() {
    return this.getTypedRuleContext(Import_as_namesContext,0);
};

Import_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterImport_from(this);
	}
};

Import_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitImport_from(this);
	}
};

Import_fromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitImport_from(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Import_fromContext = Import_fromContext;

Python3Parser.prototype.import_from = function() {

    var localctx = new Import_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, Python3Parser.RULE_import_from);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(Python3Parser.FROM);
        this.state = 550;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Python3Parser.DOT || _la===Python3Parser.ELLIPSIS) {
                this.state = 538;
                _la = this._input.LA(1);
                if(!(_la===Python3Parser.DOT || _la===Python3Parser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 543;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 544;
            this.dotted_name();
            break;

        case 2:
            this.state = 546; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 545;
                _la = this._input.LA(1);
                if(!(_la===Python3Parser.DOT || _la===Python3Parser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 548; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===Python3Parser.DOT || _la===Python3Parser.ELLIPSIS);
            break;

        }
        this.state = 552;
        this.match(Python3Parser.IMPORT);
        this.state = 559;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.STAR:
            this.state = 553;
            this.match(Python3Parser.STAR);
            break;
        case Python3Parser.OPEN_PAREN:
            this.state = 554;
            this.match(Python3Parser.OPEN_PAREN);
            this.state = 555;
            this.import_as_names();
            this.state = 556;
            this.match(Python3Parser.CLOSE_PAREN);
            break;
        case Python3Parser.NAME:
            this.state = 558;
            this.import_as_names();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_as_name;
    return this;
}

Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;

Import_as_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NAME);
    } else {
        return this.getToken(Python3Parser.NAME, i);
    }
};


Import_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterImport_as_name(this);
	}
};

Import_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitImport_as_name(this);
	}
};

Import_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitImport_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Import_as_nameContext = Import_as_nameContext;

Python3Parser.prototype.import_as_name = function() {

    var localctx = new Import_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, Python3Parser.RULE_import_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561;
        this.match(Python3Parser.NAME);
        this.state = 564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.AS) {
            this.state = 562;
            this.match(Python3Parser.AS);
            this.state = 563;
            this.match(Python3Parser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_as_name;
    return this;
}

Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;

Dotted_as_nameContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Dotted_as_nameContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

Dotted_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDotted_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext;

Python3Parser.prototype.dotted_as_name = function() {

    var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.dotted_name();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.AS) {
            this.state = 567;
            this.match(Python3Parser.AS);
            this.state = 568;
            this.match(Python3Parser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_import_as_names;
    return this;
}

Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;

Import_as_namesContext.prototype.import_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_as_nameContext);
    } else {
        return this.getTypedRuleContext(Import_as_nameContext,i);
    }
};

Import_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterImport_as_names(this);
	}
};

Import_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitImport_as_names(this);
	}
};

Import_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitImport_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Import_as_namesContext = Import_as_namesContext;

Python3Parser.prototype.import_as_names = function() {

    var localctx = new Import_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, Python3Parser.RULE_import_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.import_as_name();
        this.state = 576;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 572;
                this.match(Python3Parser.COMMA);
                this.state = 573;
                this.import_as_name(); 
            }
            this.state = 578;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

        this.state = 580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 579;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_as_names;
    return this;
}

Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;

Dotted_as_namesContext.prototype.dotted_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dotted_as_nameContext);
    } else {
        return this.getTypedRuleContext(Dotted_as_nameContext,i);
    }
};

Dotted_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDotted_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext;

Python3Parser.prototype.dotted_as_names = function() {

    var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, Python3Parser.RULE_dotted_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.dotted_as_name();
        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.COMMA) {
            this.state = 583;
            this.match(Python3Parser.COMMA);
            this.state = 584;
            this.dotted_as_name();
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dotted_name;
    return this;
}

Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;

Dotted_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NAME);
    } else {
        return this.getToken(Python3Parser.NAME, i);
    }
};


Dotted_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDotted_name(this);
	}
};

Dotted_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDotted_name(this);
	}
};

Dotted_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDotted_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Dotted_nameContext = Dotted_nameContext;

Python3Parser.prototype.dotted_name = function() {

    var localctx = new Dotted_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, Python3Parser.RULE_dotted_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.match(Python3Parser.NAME);
        this.state = 595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.DOT) {
            this.state = 591;
            this.match(Python3Parser.DOT);
            this.state = 592;
            this.match(Python3Parser.NAME);
            this.state = 597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_global_stmt;
    return this;
}

Global_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;

Global_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NAME);
    } else {
        return this.getToken(Python3Parser.NAME, i);
    }
};


Global_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitGlobal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Global_stmtContext = Global_stmtContext;

Python3Parser.prototype.global_stmt = function() {

    var localctx = new Global_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, Python3Parser.RULE_global_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.match(Python3Parser.GLOBAL);
        this.state = 599;
        this.match(Python3Parser.NAME);
        this.state = 604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.COMMA) {
            this.state = 600;
            this.match(Python3Parser.COMMA);
            this.state = 601;
            this.match(Python3Parser.NAME);
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonlocal_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
    return this;
}

Nonlocal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonlocal_stmtContext.prototype.constructor = Nonlocal_stmtContext;

Nonlocal_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Python3Parser.NAME);
    } else {
        return this.getToken(Python3Parser.NAME, i);
    }
};


Nonlocal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitNonlocal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext;

Python3Parser.prototype.nonlocal_stmt = function() {

    var localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, Python3Parser.RULE_nonlocal_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(Python3Parser.NONLOCAL);
        this.state = 608;
        this.match(Python3Parser.NAME);
        this.state = 613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.COMMA) {
            this.state = 609;
            this.match(Python3Parser.COMMA);
            this.state = 610;
            this.match(Python3Parser.NAME);
            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assert_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_assert_stmt;
    return this;
}

Assert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;

Assert_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Assert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAssert_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Assert_stmtContext = Assert_stmtContext;

Python3Parser.prototype.assert_stmt = function() {

    var localctx = new Assert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, Python3Parser.RULE_assert_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.match(Python3Parser.ASSERT);
        this.state = 617;
        this.test();
        this.state = 620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 618;
            this.match(Python3Parser.COMMA);
            this.state = 619;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_compound_stmt;
    return this;
}

Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;

Compound_stmtContext.prototype.if_stmt = function() {
    return this.getTypedRuleContext(If_stmtContext,0);
};

Compound_stmtContext.prototype.while_stmt = function() {
    return this.getTypedRuleContext(While_stmtContext,0);
};

Compound_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Compound_stmtContext.prototype.try_stmt = function() {
    return this.getTypedRuleContext(Try_stmtContext,0);
};

Compound_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Compound_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Compound_stmtContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

Compound_stmtContext.prototype.decorated = function() {
    return this.getTypedRuleContext(DecoratedContext,0);
};

Compound_stmtContext.prototype.async_stmt = function() {
    return this.getTypedRuleContext(Async_stmtContext,0);
};

Compound_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitCompound_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Compound_stmtContext = Compound_stmtContext;

Python3Parser.prototype.compound_stmt = function() {

    var localctx = new Compound_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, Python3Parser.RULE_compound_stmt);
    try {
        this.state = 631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 622;
            this.if_stmt();
            break;
        case Python3Parser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 623;
            this.while_stmt();
            break;
        case Python3Parser.FOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 624;
            this.for_stmt();
            break;
        case Python3Parser.TRY:
            this.enterOuterAlt(localctx, 4);
            this.state = 625;
            this.try_stmt();
            break;
        case Python3Parser.WITH:
            this.enterOuterAlt(localctx, 5);
            this.state = 626;
            this.with_stmt();
            break;
        case Python3Parser.DEF:
            this.enterOuterAlt(localctx, 6);
            this.state = 627;
            this.funcdef();
            break;
        case Python3Parser.CLASS:
            this.enterOuterAlt(localctx, 7);
            this.state = 628;
            this.classdef();
            break;
        case Python3Parser.AT:
            this.enterOuterAlt(localctx, 8);
            this.state = 629;
            this.decorated();
            break;
        case Python3Parser.ASYNC:
            this.enterOuterAlt(localctx, 9);
            this.state = 630;
            this.async_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_async_stmt;
    return this;
}

Async_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_stmtContext.prototype.constructor = Async_stmtContext;

Async_stmtContext.prototype.ASYNC = function() {
    return this.getToken(Python3Parser.ASYNC, 0);
};

Async_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Async_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Async_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAsync_stmt(this);
	}
};

Async_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAsync_stmt(this);
	}
};

Async_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAsync_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Async_stmtContext = Async_stmtContext;

Python3Parser.prototype.async_stmt = function() {

    var localctx = new Async_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, Python3Parser.RULE_async_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.match(Python3Parser.ASYNC);
        this.state = 637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.DEF:
            this.state = 634;
            this.funcdef();
            break;
        case Python3Parser.WITH:
            this.state = 635;
            this.with_stmt();
            break;
        case Python3Parser.FOR:
            this.state = 636;
            this.for_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_if_stmt;
    return this;
}

If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

If_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

If_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitIf_stmt(this);
	}
};

If_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitIf_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.If_stmtContext = If_stmtContext;

Python3Parser.prototype.if_stmt = function() {

    var localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, Python3Parser.RULE_if_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(Python3Parser.IF);
        this.state = 640;
        this.test();
        this.state = 641;
        this.match(Python3Parser.COLON);
        this.state = 642;
        this.suite();
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.ELIF) {
            this.state = 643;
            this.match(Python3Parser.ELIF);
            this.state = 644;
            this.test();
            this.state = 645;
            this.match(Python3Parser.COLON);
            this.state = 646;
            this.suite();
            this.state = 652;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ELSE) {
            this.state = 653;
            this.match(Python3Parser.ELSE);
            this.state = 654;
            this.match(Python3Parser.COLON);
            this.state = 655;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_while_stmt;
    return this;
}

While_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;

While_stmtContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

While_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

While_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterWhile_stmt(this);
	}
};

While_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitWhile_stmt(this);
	}
};

While_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitWhile_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.While_stmtContext = While_stmtContext;

Python3Parser.prototype.while_stmt = function() {

    var localctx = new While_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, Python3Parser.RULE_while_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(Python3Parser.WHILE);
        this.state = 659;
        this.test();
        this.state = 660;
        this.match(Python3Parser.COLON);
        this.state = 661;
        this.suite();
        this.state = 665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ELSE) {
            this.state = 662;
            this.match(Python3Parser.ELSE);
            this.state = 663;
            this.match(Python3Parser.COLON);
            this.state = 664;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_for_stmt;
    return this;
}

For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;

For_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

For_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

For_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

For_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterFor_stmt(this);
	}
};

For_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitFor_stmt(this);
	}
};

For_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitFor_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.For_stmtContext = For_stmtContext;

Python3Parser.prototype.for_stmt = function() {

    var localctx = new For_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, Python3Parser.RULE_for_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this.match(Python3Parser.FOR);
        this.state = 668;
        this.exprlist();
        this.state = 669;
        this.match(Python3Parser.IN);
        this.state = 670;
        this.testlist();
        this.state = 671;
        this.match(Python3Parser.COLON);
        this.state = 672;
        this.suite();
        this.state = 676;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ELSE) {
            this.state = 673;
            this.match(Python3Parser.ELSE);
            this.state = 674;
            this.match(Python3Parser.COLON);
            this.state = 675;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_try_stmt;
    return this;
}

Try_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;

Try_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

Try_stmtContext.prototype.except_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Except_clauseContext);
    } else {
        return this.getTypedRuleContext(Except_clauseContext,i);
    }
};

Try_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTry_stmt(this);
	}
};

Try_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTry_stmt(this);
	}
};

Try_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTry_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Try_stmtContext = Try_stmtContext;

Python3Parser.prototype.try_stmt = function() {

    var localctx = new Try_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, Python3Parser.RULE_try_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.match(Python3Parser.TRY);
        this.state = 679;
        this.match(Python3Parser.COLON);
        this.state = 680;
        this.suite();
        this.state = 702;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.EXCEPT:
            this.state = 685; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 681;
                this.except_clause();
                this.state = 682;
                this.match(Python3Parser.COLON);
                this.state = 683;
                this.suite();
                this.state = 687; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===Python3Parser.EXCEPT);
            this.state = 692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.ELSE) {
                this.state = 689;
                this.match(Python3Parser.ELSE);
                this.state = 690;
                this.match(Python3Parser.COLON);
                this.state = 691;
                this.suite();
            }

            this.state = 697;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.FINALLY) {
                this.state = 694;
                this.match(Python3Parser.FINALLY);
                this.state = 695;
                this.match(Python3Parser.COLON);
                this.state = 696;
                this.suite();
            }

            break;
        case Python3Parser.FINALLY:
            this.state = 699;
            this.match(Python3Parser.FINALLY);
            this.state = 700;
            this.match(Python3Parser.COLON);
            this.state = 701;
            this.suite();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_with_stmt;
    return this;
}

With_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;

With_stmtContext.prototype.with_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(With_itemContext);
    } else {
        return this.getTypedRuleContext(With_itemContext,i);
    }
};

With_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

With_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterWith_stmt(this);
	}
};

With_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitWith_stmt(this);
	}
};

With_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitWith_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.With_stmtContext = With_stmtContext;

Python3Parser.prototype.with_stmt = function() {

    var localctx = new With_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, Python3Parser.RULE_with_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(Python3Parser.WITH);
        this.state = 705;
        this.with_item();
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.COMMA) {
            this.state = 706;
            this.match(Python3Parser.COMMA);
            this.state = 707;
            this.with_item();
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 713;
        this.match(Python3Parser.COLON);
        this.state = 714;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_with_item;
    return this;
}

With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;

With_itemContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

With_itemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

With_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterWith_item(this);
	}
};

With_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitWith_item(this);
	}
};

With_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitWith_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.With_itemContext = With_itemContext;

Python3Parser.prototype.with_item = function() {

    var localctx = new With_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, Python3Parser.RULE_with_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 716;
        this.test();
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.AS) {
            this.state = 717;
            this.match(Python3Parser.AS);
            this.state = 718;
            this.expr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Except_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_except_clause;
    return this;
}

Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;

Except_clauseContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Except_clauseContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

Except_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterExcept_clause(this);
	}
};

Except_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitExcept_clause(this);
	}
};

Except_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitExcept_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Except_clauseContext = Except_clauseContext;

Python3Parser.prototype.except_clause = function() {

    var localctx = new Except_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, Python3Parser.RULE_except_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this.match(Python3Parser.EXCEPT);
        this.state = 727;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
            this.state = 722;
            this.test();
            this.state = 725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.AS) {
                this.state = 723;
                this.match(Python3Parser.AS);
                this.state = 724;
                this.match(Python3Parser.NAME);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_suite;
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

SuiteContext.prototype.NEWLINE = function() {
    return this.getToken(Python3Parser.NEWLINE, 0);
};

SuiteContext.prototype.INDENT = function() {
    return this.getToken(Python3Parser.INDENT, 0);
};

SuiteContext.prototype.DEDENT = function() {
    return this.getToken(Python3Parser.DEDENT, 0);
};

SuiteContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSuite(this);
	}
};

SuiteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSuite(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.SuiteContext = SuiteContext;

Python3Parser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, Python3Parser.RULE_suite);
    var _la = 0; // Token type
    try {
        this.state = 739;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 729;
            this.simple_stmt();
            break;
        case Python3Parser.NEWLINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 730;
            this.match(Python3Parser.NEWLINE);
            this.state = 731;
            this.match(Python3Parser.INDENT);
            this.state = 733; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 732;
                this.stmt();
                this.state = 735; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Python3Parser.CONTINUE - 32)) | (1 << (Python3Parser.BREAK - 32)) | (1 << (Python3Parser.ASYNC - 32)) | (1 << (Python3Parser.AWAIT - 32)) | (1 << (Python3Parser.NAME - 32)) | (1 << (Python3Parser.STRING_LITERAL - 32)) | (1 << (Python3Parser.BYTES_LITERAL - 32)) | (1 << (Python3Parser.DECIMAL_INTEGER - 32)) | (1 << (Python3Parser.OCT_INTEGER - 32)) | (1 << (Python3Parser.HEX_INTEGER - 32)) | (1 << (Python3Parser.BIN_INTEGER - 32)) | (1 << (Python3Parser.FLOAT_NUMBER - 32)) | (1 << (Python3Parser.IMAG_NUMBER - 32)) | (1 << (Python3Parser.ELLIPSIS - 32)) | (1 << (Python3Parser.STAR - 32)) | (1 << (Python3Parser.OPEN_PAREN - 32)) | (1 << (Python3Parser.OPEN_BRACK - 32)) | (1 << (Python3Parser.ADD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)))) !== 0));
            this.state = 737;
            this.match(Python3Parser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_test;
    return this;
}

TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;

TestContext.prototype.or_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_testContext);
    } else {
        return this.getTypedRuleContext(Or_testContext,i);
    }
};

TestContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TestContext.prototype.lambdef = function() {
    return this.getTypedRuleContext(LambdefContext,0);
};

TestContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTest(this);
	}
};

TestContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTest(this);
	}
};

TestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TestContext = TestContext;

Python3Parser.prototype.test = function() {

    var localctx = new TestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, Python3Parser.RULE_test);
    var _la = 0; // Token type
    try {
        this.state = 750;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 741;
            this.or_test();
            this.state = 747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.IF) {
                this.state = 742;
                this.match(Python3Parser.IF);
                this.state = 743;
                this.or_test();
                this.state = 744;
                this.match(Python3Parser.ELSE);
                this.state = 745;
                this.test();
            }

            break;
        case Python3Parser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 749;
            this.lambdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_test_nocond;
    return this;
}

Test_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_nocondContext.prototype.constructor = Test_nocondContext;

Test_nocondContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Test_nocondContext.prototype.lambdef_nocond = function() {
    return this.getTypedRuleContext(Lambdef_nocondContext,0);
};

Test_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTest_nocond(this);
	}
};

Test_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTest_nocond(this);
	}
};

Test_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTest_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Test_nocondContext = Test_nocondContext;

Python3Parser.prototype.test_nocond = function() {

    var localctx = new Test_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, Python3Parser.RULE_test_nocond);
    try {
        this.state = 754;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 752;
            this.or_test();
            break;
        case Python3Parser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 753;
            this.lambdef_nocond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_lambdef;
    return this;
}

LambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdefContext.prototype.constructor = LambdefContext;

LambdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

LambdefContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

LambdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterLambdef(this);
	}
};

LambdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitLambdef(this);
	}
};

LambdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitLambdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.LambdefContext = LambdefContext;

Python3Parser.prototype.lambdef = function() {

    var localctx = new LambdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, Python3Parser.RULE_lambdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(Python3Parser.LAMBDA);
        this.state = 758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Python3Parser.NAME - 37)) | (1 << (Python3Parser.STAR - 37)) | (1 << (Python3Parser.POWER - 37)))) !== 0)) {
            this.state = 757;
            this.varargslist();
        }

        this.state = 760;
        this.match(Python3Parser.COLON);
        this.state = 761;
        this.test();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lambdef_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
    return this;
}

Lambdef_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambdef_nocondContext.prototype.constructor = Lambdef_nocondContext;

Lambdef_nocondContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Lambdef_nocondContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

Lambdef_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitLambdef_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext;

Python3Parser.prototype.lambdef_nocond = function() {

    var localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, Python3Parser.RULE_lambdef_nocond);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this.match(Python3Parser.LAMBDA);
        this.state = 765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Python3Parser.NAME - 37)) | (1 << (Python3Parser.STAR - 37)) | (1 << (Python3Parser.POWER - 37)))) !== 0)) {
            this.state = 764;
            this.varargslist();
        }

        this.state = 767;
        this.match(Python3Parser.COLON);
        this.state = 768;
        this.test_nocond();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_or_test;
    return this;
}

Or_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_testContext.prototype.constructor = Or_testContext;

Or_testContext.prototype.and_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_testContext);
    } else {
        return this.getTypedRuleContext(And_testContext,i);
    }
};

Or_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterOr_test(this);
	}
};

Or_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitOr_test(this);
	}
};

Or_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitOr_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Or_testContext = Or_testContext;

Python3Parser.prototype.or_test = function() {

    var localctx = new Or_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, Python3Parser.RULE_or_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this.and_test();
        this.state = 775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.OR) {
            this.state = 771;
            this.match(Python3Parser.OR);
            this.state = 772;
            this.and_test();
            this.state = 777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_and_test;
    return this;
}

And_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_testContext.prototype.constructor = And_testContext;

And_testContext.prototype.not_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Not_testContext);
    } else {
        return this.getTypedRuleContext(Not_testContext,i);
    }
};

And_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAnd_test(this);
	}
};

And_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAnd_test(this);
	}
};

And_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAnd_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.And_testContext = And_testContext;

Python3Parser.prototype.and_test = function() {

    var localctx = new And_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, Python3Parser.RULE_and_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 778;
        this.not_test();
        this.state = 783;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.AND) {
            this.state = 779;
            this.match(Python3Parser.AND);
            this.state = 780;
            this.not_test();
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_not_test;
    return this;
}

Not_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_testContext.prototype.constructor = Not_testContext;

Not_testContext.prototype.not_test = function() {
    return this.getTypedRuleContext(Not_testContext,0);
};

Not_testContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

Not_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterNot_test(this);
	}
};

Not_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitNot_test(this);
	}
};

Not_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitNot_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Not_testContext = Not_testContext;

Python3Parser.prototype.not_test = function() {

    var localctx = new Not_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, Python3Parser.RULE_not_test);
    try {
        this.state = 789;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 786;
            this.match(Python3Parser.NOT);
            this.state = 787;
            this.not_test();
            break;
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 788;
            this.comparison();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ComparisonContext.prototype.comp_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comp_opContext);
    } else {
        return this.getTypedRuleContext(Comp_opContext,i);
    }
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ComparisonContext = ComparisonContext;

Python3Parser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, Python3Parser.RULE_comparison);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.expr();
        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Python3Parser.IN) | (1 << Python3Parser.NOT) | (1 << Python3Parser.IS))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (Python3Parser.LESS_THAN - 71)) | (1 << (Python3Parser.GREATER_THAN - 71)) | (1 << (Python3Parser.EQUALS - 71)) | (1 << (Python3Parser.GT_EQ - 71)) | (1 << (Python3Parser.LT_EQ - 71)) | (1 << (Python3Parser.NOT_EQ_1 - 71)) | (1 << (Python3Parser.NOT_EQ_2 - 71)))) !== 0)) {
            this.state = 792;
            this.comp_op();
            this.state = 793;
            this.expr();
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_op;
    return this;
}

Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;


Comp_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterComp_op(this);
	}
};

Comp_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitComp_op(this);
	}
};

Comp_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitComp_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Comp_opContext = Comp_opContext;

Python3Parser.prototype.comp_op = function() {

    var localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, Python3Parser.RULE_comp_op);
    try {
        this.state = 813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.match(Python3Parser.LESS_THAN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 801;
            this.match(Python3Parser.GREATER_THAN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 802;
            this.match(Python3Parser.EQUALS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 803;
            this.match(Python3Parser.GT_EQ);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 804;
            this.match(Python3Parser.LT_EQ);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 805;
            this.match(Python3Parser.NOT_EQ_1);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 806;
            this.match(Python3Parser.NOT_EQ_2);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 807;
            this.match(Python3Parser.IN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 808;
            this.match(Python3Parser.NOT);
            this.state = 809;
            this.match(Python3Parser.IN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 810;
            this.match(Python3Parser.IS);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 811;
            this.match(Python3Parser.IS);
            this.state = 812;
            this.match(Python3Parser.NOT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_star_expr;
    return this;
}

Star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Star_exprContext.prototype.constructor = Star_exprContext;

Star_exprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterStar_expr(this);
	}
};

Star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitStar_expr(this);
	}
};

Star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitStar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Star_exprContext = Star_exprContext;

Python3Parser.prototype.star_expr = function() {

    var localctx = new Star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, Python3Parser.RULE_star_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        this.match(Python3Parser.STAR);
        this.state = 816;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.xor_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xor_exprContext);
    } else {
        return this.getTypedRuleContext(Xor_exprContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ExprContext = ExprContext;

Python3Parser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, Python3Parser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.xor_expr();
        this.state = 823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.OR_OP) {
            this.state = 819;
            this.match(Python3Parser.OR_OP);
            this.state = 820;
            this.xor_expr();
            this.state = 825;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xor_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_xor_expr;
    return this;
}

Xor_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xor_exprContext.prototype.constructor = Xor_exprContext;

Xor_exprContext.prototype.and_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_exprContext);
    } else {
        return this.getTypedRuleContext(And_exprContext,i);
    }
};

Xor_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterXor_expr(this);
	}
};

Xor_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitXor_expr(this);
	}
};

Xor_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitXor_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Xor_exprContext = Xor_exprContext;

Python3Parser.prototype.xor_expr = function() {

    var localctx = new Xor_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, Python3Parser.RULE_xor_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 826;
        this.and_expr();
        this.state = 831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.XOR) {
            this.state = 827;
            this.match(Python3Parser.XOR);
            this.state = 828;
            this.and_expr();
            this.state = 833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_and_expr;
    return this;
}

And_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_exprContext.prototype.constructor = And_exprContext;

And_exprContext.prototype.shift_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_exprContext);
    } else {
        return this.getTypedRuleContext(Shift_exprContext,i);
    }
};

And_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAnd_expr(this);
	}
};

And_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAnd_expr(this);
	}
};

And_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAnd_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.And_exprContext = And_exprContext;

Python3Parser.prototype.and_expr = function() {

    var localctx = new And_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, Python3Parser.RULE_and_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.shift_expr();
        this.state = 839;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.AND_OP) {
            this.state = 835;
            this.match(Python3Parser.AND_OP);
            this.state = 836;
            this.shift_expr();
            this.state = 841;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shift_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_shift_expr;
    return this;
}

Shift_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_exprContext.prototype.constructor = Shift_exprContext;

Shift_exprContext.prototype.arith_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Arith_exprContext);
    } else {
        return this.getTypedRuleContext(Arith_exprContext,i);
    }
};

Shift_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterShift_expr(this);
	}
};

Shift_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitShift_expr(this);
	}
};

Shift_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitShift_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Shift_exprContext = Shift_exprContext;

Python3Parser.prototype.shift_expr = function() {

    var localctx = new Shift_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, Python3Parser.RULE_shift_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.arith_expr();
        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.LEFT_SHIFT || _la===Python3Parser.RIGHT_SHIFT) {
            this.state = 843;
            _la = this._input.LA(1);
            if(!(_la===Python3Parser.LEFT_SHIFT || _la===Python3Parser.RIGHT_SHIFT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 844;
            this.arith_expr();
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arith_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_arith_expr;
    return this;
}

Arith_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arith_exprContext.prototype.constructor = Arith_exprContext;

Arith_exprContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Arith_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterArith_expr(this);
	}
};

Arith_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitArith_expr(this);
	}
};

Arith_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitArith_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Arith_exprContext = Arith_exprContext;

Python3Parser.prototype.arith_expr = function() {

    var localctx = new Arith_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, Python3Parser.RULE_arith_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this.term();
        this.state = 855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Python3Parser.ADD || _la===Python3Parser.MINUS) {
            this.state = 851;
            _la = this._input.LA(1);
            if(!(_la===Python3Parser.ADD || _la===Python3Parser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 852;
            this.term();
            this.state = 857;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TermContext = TermContext;

Python3Parser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, Python3Parser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.factor();
        this.state = 863;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (Python3Parser.STAR - 48)) | (1 << (Python3Parser.DIV - 48)) | (1 << (Python3Parser.MOD - 48)) | (1 << (Python3Parser.IDIV - 48)) | (1 << (Python3Parser.AT - 48)))) !== 0)) {
            this.state = 859;
            _la = this._input.LA(1);
            if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (Python3Parser.STAR - 48)) | (1 << (Python3Parser.DIV - 48)) | (1 << (Python3Parser.MOD - 48)) | (1 << (Python3Parser.IDIV - 48)) | (1 << (Python3Parser.AT - 48)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 860;
            this.factor();
            this.state = 865;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

FactorContext.prototype.power = function() {
    return this.getTypedRuleContext(PowerContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitFactor(this);
	}
};

FactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.FactorContext = FactorContext;

Python3Parser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, Python3Parser.RULE_factor);
    var _la = 0; // Token type
    try {
        this.state = 869;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 866;
            _la = this._input.LA(1);
            if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (Python3Parser.ADD - 63)) | (1 << (Python3Parser.MINUS - 63)) | (1 << (Python3Parser.NOT_OP - 63)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 867;
            this.factor();
            break;
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 868;
            this.power();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_power;
    return this;
}

PowerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerContext.prototype.constructor = PowerContext;

PowerContext.prototype.atom_expr = function() {
    return this.getTypedRuleContext(Atom_exprContext,0);
};

PowerContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

PowerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterPower(this);
	}
};

PowerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitPower(this);
	}
};

PowerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitPower(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.PowerContext = PowerContext;

Python3Parser.prototype.power = function() {

    var localctx = new PowerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, Python3Parser.RULE_power);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 871;
        this.atom_expr();
        this.state = 874;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.POWER) {
            this.state = 872;
            this.match(Python3Parser.POWER);
            this.state = 873;
            this.factor();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atom_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_atom_expr;
    return this;
}

Atom_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atom_exprContext.prototype.constructor = Atom_exprContext;

Atom_exprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Atom_exprContext.prototype.AWAIT = function() {
    return this.getToken(Python3Parser.AWAIT, 0);
};

Atom_exprContext.prototype.trailer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TrailerContext);
    } else {
        return this.getTypedRuleContext(TrailerContext,i);
    }
};

Atom_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAtom_expr(this);
	}
};

Atom_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAtom_expr(this);
	}
};

Atom_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAtom_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Atom_exprContext = Atom_exprContext;

Python3Parser.prototype.atom_expr = function() {

    var localctx = new Atom_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, Python3Parser.RULE_atom_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 877;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.AWAIT) {
            this.state = 876;
            this.match(Python3Parser.AWAIT);
        }

        this.state = 879;
        this.atom();
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (Python3Parser.DOT - 46)) | (1 << (Python3Parser.OPEN_PAREN - 46)) | (1 << (Python3Parser.OPEN_BRACK - 46)))) !== 0)) {
            this.state = 880;
            this.trailer();
            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AtomContext.prototype.number_literal = function() {
    return this.getTypedRuleContext(Number_literalContext,0);
};

AtomContext.prototype.none_literal = function() {
    return this.getTypedRuleContext(None_literalContext,0);
};

AtomContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

AtomContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

AtomContext.prototype.testlist_comp = function() {
    return this.getTypedRuleContext(Testlist_compContext,0);
};

AtomContext.prototype.dictorsetmaker = function() {
    return this.getTypedRuleContext(DictorsetmakerContext,0);
};

AtomContext.prototype.string_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(String_literalContext);
    } else {
        return this.getTypedRuleContext(String_literalContext,i);
    }
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitAtom(this);
	}
};

AtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.AtomContext = AtomContext;

Python3Parser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, Python3Parser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.OPEN_PAREN:
            this.state = 886;
            this.match(Python3Parser.OPEN_PAREN);
            this.state = 889;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case Python3Parser.YIELD:
            	this.state = 887;
            	this.yield_expr();
            	break;
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.STAR:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
            	this.state = 888;
            	this.testlist_comp();
            	break;
            case Python3Parser.CLOSE_PAREN:
            	break;
            default:
            	break;
            }
            this.state = 891;
            this.match(Python3Parser.CLOSE_PAREN);
            break;
        case Python3Parser.OPEN_BRACK:
            this.state = 892;
            this.match(Python3Parser.OPEN_BRACK);
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
                this.state = 893;
                this.testlist_comp();
            }

            this.state = 896;
            this.match(Python3Parser.CLOSE_BRACK);
            break;
        case Python3Parser.OPEN_BRACE:
            this.state = 897;
            this.match(Python3Parser.OPEN_BRACE);
            this.state = 899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (Python3Parser.POWER - 54)) | (1 << (Python3Parser.OPEN_BRACK - 54)) | (1 << (Python3Parser.ADD - 54)) | (1 << (Python3Parser.MINUS - 54)) | (1 << (Python3Parser.NOT_OP - 54)) | (1 << (Python3Parser.OPEN_BRACE - 54)))) !== 0)) {
                this.state = 898;
                this.dictorsetmaker();
            }

            this.state = 901;
            this.match(Python3Parser.CLOSE_BRACE);
            break;
        case Python3Parser.NAME:
            this.state = 902;
            this.identifier();
            break;
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
            this.state = 903;
            this.number_literal();
            break;
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
            this.state = 905; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 904;
                this.string_literal();
                this.state = 907; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===Python3Parser.STRING_LITERAL || _la===Python3Parser.BYTES_LITERAL);
            break;
        case Python3Parser.ELLIPSIS:
            this.state = 909;
            this.match(Python3Parser.ELLIPSIS);
            break;
        case Python3Parser.NONE:
            this.state = 910;
            this.none_literal();
            break;
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
            this.state = 911;
            this.boolean_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_compContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist_comp;
    return this;
}

Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;

Testlist_compContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_compContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_compContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Testlist_compContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTestlist_comp(this);
	}
};

Testlist_compContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTestlist_comp(this);
	}
};

Testlist_compContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTestlist_comp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Testlist_compContext = Testlist_compContext;

Python3Parser.prototype.testlist_comp = function() {

    var localctx = new Testlist_compContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, Python3Parser.RULE_testlist_comp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.state = 914;
            this.test();
            break;
        case Python3Parser.STAR:
            this.state = 915;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 932;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.FOR:
        case Python3Parser.ASYNC:
            this.state = 918;
            this.comp_for();
            break;
        case Python3Parser.CLOSE_PAREN:
        case Python3Parser.COMMA:
        case Python3Parser.CLOSE_BRACK:
            this.state = 926;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 919;
                    this.match(Python3Parser.COMMA);
                    this.state = 922;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case Python3Parser.LAMBDA:
                    case Python3Parser.NOT:
                    case Python3Parser.NONE:
                    case Python3Parser.TRUE:
                    case Python3Parser.FALSE:
                    case Python3Parser.AWAIT:
                    case Python3Parser.NAME:
                    case Python3Parser.STRING_LITERAL:
                    case Python3Parser.BYTES_LITERAL:
                    case Python3Parser.DECIMAL_INTEGER:
                    case Python3Parser.OCT_INTEGER:
                    case Python3Parser.HEX_INTEGER:
                    case Python3Parser.BIN_INTEGER:
                    case Python3Parser.FLOAT_NUMBER:
                    case Python3Parser.IMAG_NUMBER:
                    case Python3Parser.ELLIPSIS:
                    case Python3Parser.OPEN_PAREN:
                    case Python3Parser.OPEN_BRACK:
                    case Python3Parser.ADD:
                    case Python3Parser.MINUS:
                    case Python3Parser.NOT_OP:
                    case Python3Parser.OPEN_BRACE:
                        this.state = 920;
                        this.test();
                        break;
                    case Python3Parser.STAR:
                        this.state = 921;
                        this.star_expr();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 928;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
            }

            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COMMA) {
                this.state = 929;
                this.match(Python3Parser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_trailer;
    return this;
}

TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;

TrailerContext.prototype.paren_trailer = function() {
    return this.getTypedRuleContext(Paren_trailerContext,0);
};

TrailerContext.prototype.bracket_trailer = function() {
    return this.getTypedRuleContext(Bracket_trailerContext,0);
};

TrailerContext.prototype.dot_trailer = function() {
    return this.getTypedRuleContext(Dot_trailerContext,0);
};

TrailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTrailer(this);
	}
};

TrailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTrailer(this);
	}
};

TrailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTrailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TrailerContext = TrailerContext;

Python3Parser.prototype.trailer = function() {

    var localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, Python3Parser.RULE_trailer);
    try {
        this.state = 937;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.OPEN_PAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 934;
            this.paren_trailer();
            break;
        case Python3Parser.OPEN_BRACK:
            this.enterOuterAlt(localctx, 2);
            this.state = 935;
            this.bracket_trailer();
            break;
        case Python3Parser.DOT:
            this.enterOuterAlt(localctx, 3);
            this.state = 936;
            this.dot_trailer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Paren_trailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_paren_trailer;
    return this;
}

Paren_trailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Paren_trailerContext.prototype.constructor = Paren_trailerContext;

Paren_trailerContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

Paren_trailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterParen_trailer(this);
	}
};

Paren_trailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitParen_trailer(this);
	}
};

Paren_trailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitParen_trailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Paren_trailerContext = Paren_trailerContext;

Python3Parser.prototype.paren_trailer = function() {

    var localctx = new Paren_trailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, Python3Parser.RULE_paren_trailer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (Python3Parser.POWER - 54)) | (1 << (Python3Parser.OPEN_BRACK - 54)) | (1 << (Python3Parser.ADD - 54)) | (1 << (Python3Parser.MINUS - 54)) | (1 << (Python3Parser.NOT_OP - 54)) | (1 << (Python3Parser.OPEN_BRACE - 54)))) !== 0)) {
            this.state = 940;
            this.arglist();
        }

        this.state = 943;
        this.match(Python3Parser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bracket_trailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_bracket_trailer;
    return this;
}

Bracket_trailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bracket_trailerContext.prototype.constructor = Bracket_trailerContext;

Bracket_trailerContext.prototype.subscriptlist = function() {
    return this.getTypedRuleContext(SubscriptlistContext,0);
};

Bracket_trailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterBracket_trailer(this);
	}
};

Bracket_trailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitBracket_trailer(this);
	}
};

Bracket_trailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitBracket_trailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Bracket_trailerContext = Bracket_trailerContext;

Python3Parser.prototype.bracket_trailer = function() {

    var localctx = new Bracket_trailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, Python3Parser.RULE_bracket_trailer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.match(Python3Parser.OPEN_BRACK);
        this.state = 946;
        this.subscriptlist();
        this.state = 947;
        this.match(Python3Parser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dot_trailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dot_trailer;
    return this;
}

Dot_trailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_trailerContext.prototype.constructor = Dot_trailerContext;

Dot_trailerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Dot_trailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDot_trailer(this);
	}
};

Dot_trailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDot_trailer(this);
	}
};

Dot_trailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDot_trailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Dot_trailerContext = Dot_trailerContext;

Python3Parser.prototype.dot_trailer = function() {

    var localctx = new Dot_trailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, Python3Parser.RULE_dot_trailer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 949;
        this.match(Python3Parser.DOT);
        this.state = 950;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_subscriptlist;
    return this;
}

SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;

SubscriptlistContext.prototype.subscript = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubscriptContext);
    } else {
        return this.getTypedRuleContext(SubscriptContext,i);
    }
};

SubscriptlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSubscriptlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.SubscriptlistContext = SubscriptlistContext;

Python3Parser.prototype.subscriptlist = function() {

    var localctx = new SubscriptlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, Python3Parser.RULE_subscriptlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 952;
        this.subscript();
        this.state = 957;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 953;
                this.match(Python3Parser.COMMA);
                this.state = 954;
                this.subscript(); 
            }
            this.state = 959;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 960;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_subscript;
    return this;
}

SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SubscriptContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

SubscriptContext.prototype.sliceop = function() {
    return this.getTypedRuleContext(SliceopContext,0);
};

SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.SubscriptContext = SubscriptContext;

Python3Parser.prototype.subscript = function() {

    var localctx = new SubscriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, Python3Parser.RULE_subscript);
    var _la = 0; // Token type
    try {
        this.state = 974;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            this.test();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 965;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
                this.state = 964;
                this.test();
            }

            this.state = 967;
            this.match(Python3Parser.COLON);
            this.state = 969;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
                this.state = 968;
                this.test();
            }

            this.state = 972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.COLON) {
                this.state = 971;
                this.sliceop();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SliceopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_sliceop;
    return this;
}

SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;

SliceopContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

SliceopContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterSliceop(this);
	}
};

SliceopContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitSliceop(this);
	}
};

SliceopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitSliceop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.SliceopContext = SliceopContext;

Python3Parser.prototype.sliceop = function() {

    var localctx = new SliceopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, Python3Parser.RULE_sliceop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(Python3Parser.COLON);
        this.state = 978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (Python3Parser.OPEN_BRACK - 56)) | (1 << (Python3Parser.ADD - 56)) | (1 << (Python3Parser.MINUS - 56)) | (1 << (Python3Parser.NOT_OP - 56)) | (1 << (Python3Parser.OPEN_BRACE - 56)))) !== 0)) {
            this.state = 977;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_exprlist;
    return this;
}

ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;

ExprlistContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprlistContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

ExprlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterExprlist(this);
	}
};

ExprlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitExprlist(this);
	}
};

ExprlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitExprlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ExprlistContext = ExprlistContext;

Python3Parser.prototype.exprlist = function() {

    var localctx = new ExprlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, Python3Parser.RULE_exprlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 982;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.state = 980;
            this.expr();
            break;
        case Python3Parser.STAR:
            this.state = 981;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 991;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 984;
                this.match(Python3Parser.COMMA);
                this.state = 987;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case Python3Parser.NONE:
                case Python3Parser.TRUE:
                case Python3Parser.FALSE:
                case Python3Parser.AWAIT:
                case Python3Parser.NAME:
                case Python3Parser.STRING_LITERAL:
                case Python3Parser.BYTES_LITERAL:
                case Python3Parser.DECIMAL_INTEGER:
                case Python3Parser.OCT_INTEGER:
                case Python3Parser.HEX_INTEGER:
                case Python3Parser.BIN_INTEGER:
                case Python3Parser.FLOAT_NUMBER:
                case Python3Parser.IMAG_NUMBER:
                case Python3Parser.ELLIPSIS:
                case Python3Parser.OPEN_PAREN:
                case Python3Parser.OPEN_BRACK:
                case Python3Parser.ADD:
                case Python3Parser.MINUS:
                case Python3Parser.NOT_OP:
                case Python3Parser.OPEN_BRACE:
                    this.state = 985;
                    this.expr();
                    break;
                case Python3Parser.STAR:
                    this.state = 986;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 993;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

        this.state = 995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 994;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_testlist;
    return this;
}

TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;

TestlistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TestlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterTestlist(this);
	}
};

TestlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitTestlist(this);
	}
};

TestlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitTestlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.TestlistContext = TestlistContext;

Python3Parser.prototype.testlist = function() {

    var localctx = new TestlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, Python3Parser.RULE_testlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.test();
        this.state = 1002;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 998;
                this.match(Python3Parser.COMMA);
                this.state = 999;
                this.test(); 
            }
            this.state = 1004;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
        }

        this.state = 1006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 1005;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DictorsetmakerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
    return this;
}

DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;

DictorsetmakerContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

DictorsetmakerContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DictorsetmakerContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

DictorsetmakerContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

DictorsetmakerContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitDictorsetmaker(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.DictorsetmakerContext = DictorsetmakerContext;

Python3Parser.prototype.dictorsetmaker = function() {

    var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, Python3Parser.RULE_dictorsetmaker);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1056;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1014;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
                this.state = 1008;
                this.test();
                this.state = 1009;
                this.match(Python3Parser.COLON);
                this.state = 1010;
                this.test();
                break;
            case Python3Parser.POWER:
                this.state = 1012;
                this.match(Python3Parser.POWER);
                this.state = 1013;
                this.expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1034;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.FOR:
            case Python3Parser.ASYNC:
                this.state = 1016;
                this.comp_for();
                break;
            case Python3Parser.COMMA:
            case Python3Parser.CLOSE_BRACE:
                this.state = 1028;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1017;
                        this.match(Python3Parser.COMMA);
                        this.state = 1024;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case Python3Parser.LAMBDA:
                        case Python3Parser.NOT:
                        case Python3Parser.NONE:
                        case Python3Parser.TRUE:
                        case Python3Parser.FALSE:
                        case Python3Parser.AWAIT:
                        case Python3Parser.NAME:
                        case Python3Parser.STRING_LITERAL:
                        case Python3Parser.BYTES_LITERAL:
                        case Python3Parser.DECIMAL_INTEGER:
                        case Python3Parser.OCT_INTEGER:
                        case Python3Parser.HEX_INTEGER:
                        case Python3Parser.BIN_INTEGER:
                        case Python3Parser.FLOAT_NUMBER:
                        case Python3Parser.IMAG_NUMBER:
                        case Python3Parser.ELLIPSIS:
                        case Python3Parser.OPEN_PAREN:
                        case Python3Parser.OPEN_BRACK:
                        case Python3Parser.ADD:
                        case Python3Parser.MINUS:
                        case Python3Parser.NOT_OP:
                        case Python3Parser.OPEN_BRACE:
                            this.state = 1018;
                            this.test();
                            this.state = 1019;
                            this.match(Python3Parser.COLON);
                            this.state = 1020;
                            this.test();
                            break;
                        case Python3Parser.POWER:
                            this.state = 1022;
                            this.match(Python3Parser.POWER);
                            this.state = 1023;
                            this.expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1030;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
                }

                this.state = 1032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===Python3Parser.COMMA) {
                    this.state = 1031;
                    this.match(Python3Parser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.state = 1038;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
                this.state = 1036;
                this.test();
                break;
            case Python3Parser.STAR:
                this.state = 1037;
                this.star_expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1054;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case Python3Parser.FOR:
            case Python3Parser.ASYNC:
                this.state = 1040;
                this.comp_for();
                break;
            case Python3Parser.COMMA:
            case Python3Parser.CLOSE_BRACE:
                this.state = 1048;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1041;
                        this.match(Python3Parser.COMMA);
                        this.state = 1044;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case Python3Parser.LAMBDA:
                        case Python3Parser.NOT:
                        case Python3Parser.NONE:
                        case Python3Parser.TRUE:
                        case Python3Parser.FALSE:
                        case Python3Parser.AWAIT:
                        case Python3Parser.NAME:
                        case Python3Parser.STRING_LITERAL:
                        case Python3Parser.BYTES_LITERAL:
                        case Python3Parser.DECIMAL_INTEGER:
                        case Python3Parser.OCT_INTEGER:
                        case Python3Parser.HEX_INTEGER:
                        case Python3Parser.BIN_INTEGER:
                        case Python3Parser.FLOAT_NUMBER:
                        case Python3Parser.IMAG_NUMBER:
                        case Python3Parser.ELLIPSIS:
                        case Python3Parser.OPEN_PAREN:
                        case Python3Parser.OPEN_BRACK:
                        case Python3Parser.ADD:
                        case Python3Parser.MINUS:
                        case Python3Parser.NOT_OP:
                        case Python3Parser.OPEN_BRACE:
                            this.state = 1042;
                            this.test();
                            break;
                        case Python3Parser.STAR:
                            this.state = 1043;
                            this.star_expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1050;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
                }

                this.state = 1052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===Python3Parser.COMMA) {
                    this.state = 1051;
                    this.match(Python3Parser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_classdef;
    return this;
}

ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;

ClassdefContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

ClassdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

ClassdefContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

ClassdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterClassdef(this);
	}
};

ClassdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitClassdef(this);
	}
};

ClassdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitClassdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ClassdefContext = ClassdefContext;

Python3Parser.prototype.classdef = function() {

    var localctx = new ClassdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, Python3Parser.RULE_classdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1058;
        this.match(Python3Parser.CLASS);
        this.state = 1059;
        this.match(Python3Parser.NAME);
        this.state = 1065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.OPEN_PAREN) {
            this.state = 1060;
            this.match(Python3Parser.OPEN_PAREN);
            this.state = 1062;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.AWAIT - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (Python3Parser.POWER - 54)) | (1 << (Python3Parser.OPEN_BRACK - 54)) | (1 << (Python3Parser.ADD - 54)) | (1 << (Python3Parser.MINUS - 54)) | (1 << (Python3Parser.NOT_OP - 54)) | (1 << (Python3Parser.OPEN_BRACE - 54)))) !== 0)) {
                this.state = 1061;
                this.arglist();
            }

            this.state = 1064;
            this.match(Python3Parser.CLOSE_PAREN);
        }

        this.state = 1067;
        this.match(Python3Parser.COLON);
        this.state = 1068;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitArglist(this);
	}
};

ArglistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitArglist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ArglistContext = ArglistContext;

Python3Parser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, Python3Parser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1070;
        this.argument();
        this.state = 1075;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1071;
                this.match(Python3Parser.COMMA);
                this.state = 1072;
                this.argument(); 
            }
            this.state = 1077;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

        this.state = 1079;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.COMMA) {
            this.state = 1078;
            this.match(Python3Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

ArgumentContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitArgument(this);
	}
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.ArgumentContext = ArgumentContext;

Python3Parser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, Python3Parser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1093;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1081;
            this.test();
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Python3Parser.FOR || _la===Python3Parser.ASYNC) {
                this.state = 1082;
                this.comp_for();
            }

            break;

        case 2:
            this.state = 1085;
            this.test();
            this.state = 1086;
            this.match(Python3Parser.ASSIGN);
            this.state = 1087;
            this.test();
            break;

        case 3:
            this.state = 1089;
            this.match(Python3Parser.POWER);
            this.state = 1090;
            this.test();
            break;

        case 4:
            this.state = 1091;
            this.match(Python3Parser.STAR);
            this.state = 1092;
            this.test();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_iterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_iter;
    return this;
}

Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;

Comp_iterContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Comp_iterContext.prototype.comp_if = function() {
    return this.getTypedRuleContext(Comp_ifContext,0);
};

Comp_iterContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterComp_iter(this);
	}
};

Comp_iterContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitComp_iter(this);
	}
};

Comp_iterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitComp_iter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Comp_iterContext = Comp_iterContext;

Python3Parser.prototype.comp_iter = function() {

    var localctx = new Comp_iterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, Python3Parser.RULE_comp_iter);
    try {
        this.state = 1097;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.FOR:
        case Python3Parser.ASYNC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1095;
            this.comp_for();
            break;
        case Python3Parser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1096;
            this.comp_if();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_forContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_for;
    return this;
}

Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;

Comp_forContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Comp_forContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Comp_forContext.prototype.ASYNC = function() {
    return this.getToken(Python3Parser.ASYNC, 0);
};

Comp_forContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_forContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterComp_for(this);
	}
};

Comp_forContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitComp_for(this);
	}
};

Comp_forContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitComp_for(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Comp_forContext = Comp_forContext;

Python3Parser.prototype.comp_for = function() {

    var localctx = new Comp_forContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, Python3Parser.RULE_comp_for);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Python3Parser.ASYNC) {
            this.state = 1099;
            this.match(Python3Parser.ASYNC);
        }

        this.state = 1102;
        this.match(Python3Parser.FOR);
        this.state = 1103;
        this.exprlist();
        this.state = 1104;
        this.match(Python3Parser.IN);
        this.state = 1105;
        this.or_test();
        this.state = 1107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (Python3Parser.IF - 10)) | (1 << (Python3Parser.FOR - 10)) | (1 << (Python3Parser.ASYNC - 10)))) !== 0)) {
            this.state = 1106;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_comp_if;
    return this;
}

Comp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_ifContext.prototype.constructor = Comp_ifContext;

Comp_ifContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Comp_ifContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterComp_if(this);
	}
};

Comp_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitComp_if(this);
	}
};

Comp_ifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitComp_if(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Comp_ifContext = Comp_ifContext;

Python3Parser.prototype.comp_if = function() {

    var localctx = new Comp_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, Python3Parser.RULE_comp_if);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        this.match(Python3Parser.IF);
        this.state = 1110;
        this.test_nocond();
        this.state = 1112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (Python3Parser.IF - 10)) | (1 << (Python3Parser.FOR - 10)) | (1 << (Python3Parser.ASYNC - 10)))) !== 0)) {
            this.state = 1111;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Encoding_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_encoding_decl;
    return this;
}

Encoding_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Encoding_declContext.prototype.constructor = Encoding_declContext;

Encoding_declContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

Encoding_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterEncoding_decl(this);
	}
};

Encoding_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitEncoding_decl(this);
	}
};

Encoding_declContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitEncoding_decl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Encoding_declContext = Encoding_declContext;

Python3Parser.prototype.encoding_decl = function() {

    var localctx = new Encoding_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, Python3Parser.RULE_encoding_decl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1114;
        this.match(Python3Parser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_expr;
    return this;
}

Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;

Yield_exprContext.prototype.yield_arg = function() {
    return this.getTypedRuleContext(Yield_argContext,0);
};

Yield_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterYield_expr(this);
	}
};

Yield_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitYield_expr(this);
	}
};

Yield_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitYield_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Yield_exprContext = Yield_exprContext;

Python3Parser.prototype.yield_expr = function() {

    var localctx = new Yield_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, Python3Parser.RULE_yield_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1116;
        this.match(Python3Parser.YIELD);
        this.state = 1118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (Python3Parser.AWAIT - 35)) | (1 << (Python3Parser.NAME - 35)) | (1 << (Python3Parser.STRING_LITERAL - 35)) | (1 << (Python3Parser.BYTES_LITERAL - 35)) | (1 << (Python3Parser.DECIMAL_INTEGER - 35)) | (1 << (Python3Parser.OCT_INTEGER - 35)) | (1 << (Python3Parser.HEX_INTEGER - 35)) | (1 << (Python3Parser.BIN_INTEGER - 35)) | (1 << (Python3Parser.FLOAT_NUMBER - 35)) | (1 << (Python3Parser.IMAG_NUMBER - 35)) | (1 << (Python3Parser.ELLIPSIS - 35)) | (1 << (Python3Parser.OPEN_PAREN - 35)) | (1 << (Python3Parser.OPEN_BRACK - 35)) | (1 << (Python3Parser.ADD - 35)) | (1 << (Python3Parser.MINUS - 35)))) !== 0) || _la===Python3Parser.NOT_OP || _la===Python3Parser.OPEN_BRACE) {
            this.state = 1117;
            this.yield_arg();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_yield_arg;
    return this;
}

Yield_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_argContext.prototype.constructor = Yield_argContext;

Yield_argContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Yield_argContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Yield_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterYield_arg(this);
	}
};

Yield_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitYield_arg(this);
	}
};

Yield_argContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitYield_arg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Yield_argContext = Yield_argContext;

Python3Parser.prototype.yield_arg = function() {

    var localctx = new Yield_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, Python3Parser.RULE_yield_arg);
    try {
        this.state = 1123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1120;
            this.match(Python3Parser.FROM);
            this.state = 1121;
            this.test();
            break;
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1122;
            this.testlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_string_literal;
    return this;
}

String_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.STRING_LITERAL = function() {
    return this.getToken(Python3Parser.STRING_LITERAL, 0);
};

String_literalContext.prototype.BYTES_LITERAL = function() {
    return this.getToken(Python3Parser.BYTES_LITERAL, 0);
};

String_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterString_literal(this);
	}
};

String_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitString_literal(this);
	}
};

String_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitString_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.String_literalContext = String_literalContext;

Python3Parser.prototype.string_literal = function() {

    var localctx = new String_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, Python3Parser.RULE_string_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        _la = this._input.LA(1);
        if(!(_la===Python3Parser.STRING_LITERAL || _la===Python3Parser.BYTES_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Number_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_number_literal;
    return this;
}

Number_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Number_literalContext.prototype.constructor = Number_literalContext;

Number_literalContext.prototype.integer_literal = function() {
    return this.getTypedRuleContext(Integer_literalContext,0);
};

Number_literalContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(Python3Parser.FLOAT_NUMBER, 0);
};

Number_literalContext.prototype.IMAG_NUMBER = function() {
    return this.getToken(Python3Parser.IMAG_NUMBER, 0);
};

Number_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterNumber_literal(this);
	}
};

Number_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitNumber_literal(this);
	}
};

Number_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitNumber_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Number_literalContext = Number_literalContext;

Python3Parser.prototype.number_literal = function() {

    var localctx = new Number_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, Python3Parser.RULE_number_literal);
    try {
        this.state = 1130;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1127;
            this.integer_literal();
            break;
        case Python3Parser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1128;
            this.match(Python3Parser.FLOAT_NUMBER);
            break;
        case Python3Parser.IMAG_NUMBER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1129;
            this.match(Python3Parser.IMAG_NUMBER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Integer_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_integer_literal;
    return this;
}

Integer_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integer_literalContext.prototype.constructor = Integer_literalContext;

Integer_literalContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(Python3Parser.DECIMAL_INTEGER, 0);
};

Integer_literalContext.prototype.OCT_INTEGER = function() {
    return this.getToken(Python3Parser.OCT_INTEGER, 0);
};

Integer_literalContext.prototype.HEX_INTEGER = function() {
    return this.getToken(Python3Parser.HEX_INTEGER, 0);
};

Integer_literalContext.prototype.BIN_INTEGER = function() {
    return this.getToken(Python3Parser.BIN_INTEGER, 0);
};

Integer_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterInteger_literal(this);
	}
};

Integer_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitInteger_literal(this);
	}
};

Integer_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitInteger_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Integer_literalContext = Integer_literalContext;

Python3Parser.prototype.integer_literal = function() {

    var localctx = new Integer_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, Python3Parser.RULE_integer_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1132;
        _la = this._input.LA(1);
        if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (Python3Parser.DECIMAL_INTEGER - 40)) | (1 << (Python3Parser.OCT_INTEGER - 40)) | (1 << (Python3Parser.HEX_INTEGER - 40)) | (1 << (Python3Parser.BIN_INTEGER - 40)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(Python3Parser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(Python3Parser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitBoolean_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.Boolean_literalContext = Boolean_literalContext;

Python3Parser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, Python3Parser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        _la = this._input.LA(1);
        if(!(_la===Python3Parser.TRUE || _la===Python3Parser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function None_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_none_literal;
    return this;
}

None_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
None_literalContext.prototype.constructor = None_literalContext;

None_literalContext.prototype.NONE = function() {
    return this.getToken(Python3Parser.NONE, 0);
};

None_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterNone_literal(this);
	}
};

None_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitNone_literal(this);
	}
};

None_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitNone_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.None_literalContext = None_literalContext;

Python3Parser.prototype.none_literal = function() {

    var localctx = new None_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, Python3Parser.RULE_none_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1136;
        this.match(Python3Parser.NONE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Python3Parser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.NAME = function() {
    return this.getToken(Python3Parser.NAME, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof Python3Listener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Python3Visitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Python3Parser.IdentifierContext = IdentifierContext;

Python3Parser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, Python3Parser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.match(Python3Parser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.Python3Parser = Python3Parser;
