{
  "tests": {
    "Empty statement": [
      {
        "description": "empty",
        "javascript": "",
        "python": "",
        "java": "",
        "csharp": "",
        "shell": ""
      },
      {
        "description": "whitespace",
        "javascript": "  ",
        "python": "",
        "java": "",
        "csharp": "",
        "shell": ""
      },
      {
        "description": "semicolon",
        "javascript": ";",
        "python": "",
        "java": "",
        "csharp": "",
        "shell": ""
      }
    ],
    "Whitespace": [
      {
        "description": "newline between statements",
        "javascript": "1 \n +2",
        "python": "1+2",
        "java": "1L+2L",
        "csharp": "1+2",
        "shell": "1+2"
      },
      {
        "description": "semicolon between statements",
        "javascript": "1 ; +2",
        "python": "1\n+2",
        "java": "1L\n+2L",
        "csharp": "1\n+2",
        "shell": "1\n+2"
      },
      {
        "description": "tabs between statements",
        "javascript": "1 \t\t +2",
        "python": "1+2",
        "java": "1L+2L",
        "csharp": "1+2",
        "shell": "1+2"
      },
      {
        "description": "escaped chars",
        "javascript": "\r\t\n",
        "python": "",
        "java": "",
        "csharp": "",
        "shell": ""
      }
    ],
    "Comments": [
      {
        "description": "single line comment",
        "javascript": "1 // a comment",
        "python": "1",
        "java": "1L",
        "csharp": "1",
        "shell": "1"
      },
      {
        "description": "single line comment with an expression on the next line",
        "javascript": "1 // a comment\n2",
        "python": "1\n2",
        "java": "1L\n2L",
        "csharp": "1\n2",
        "shell": "1\n2"
      },
      {
        "description": "multi line comment no newlines",
        "javascript": "1 /* a comment*/",
        "python": "1",
        "java": "1L",
        "csharp": "1",
        "shell": "1"
      },
      {
        "description": "multi line comment with newlines",
        "javascript": "1 /* a \ncom\nmen\nt*/",
        "python": "1",
        "java": "1L",
        "csharp": "1",
        "shell": "1"
      },
      {
        "description": "multi line comment with newlines in the middle of an expression",
        "javascript": "1 /* a \ncom\nmen\nt*/+2",
        "python": "1+2",
        "java": "1L+2L",
        "csharp": "1+2",
        "shell": "1+2"
      },
      {
        "description": "multi line comment in the middle of an expression",
        "javascript": "1 /* a comment*/+2",
        "python": "1+2",
        "java": "1L+2L",
        "csharp": "1+2",
        "shell": "1+2"
      },
      {
        "description": "multi line comment with newlines with an expression on the next line",
        "javascript": "1 /* a \ncomn\nmen\nt*/\n+2",
        "python": "1+2",
        "java": "1L+2L",
        "csharp": "1+2",
        "shell": "1+2"
      }
    ],
    "Partial statements": [
      {
        "description": "new Long",
        "javascript": "new Long",
        "python": "Int64",
        "java": "",
        "csharp": "",
        "shell": "new NumberLong"
      },
      {
        "description": "new Decimal128",
        "javascript": "new Decimal128",
        "python": "Decimal128",
        "java": "Decimal128",
        "csharp": "Decimal128",
        "shell": "new NumberDecimal"
      }
    ],
    "Parens": [
      {
        "description": "one set",
        "javascript": "(1 === 1)",
        "python": "(1 == 1)",
        "java": "(1L == 1L)",
        "csharp": "(1 == 1)",
        "shell": "(1 === 1)"
      },
      {
        "description": "nested parens",
        "javascript": "((1 === (1)))",
        "python": "((1 == (1)))",
        "java": "((1L == (1L)))",
        "csharp": "((1 == (1)))",
        "shell": "((1 === (1)))"
      }
    ],
    "Constructors without args": [
      {
        "description": "Double without args",
        "javascript": "Double",
        "python": "float",
        "java": "",
        "csharp": "",
        "shell": "Number"
      },
      {
        "description": "Int32 without args",
        "javascript": "Int32",
        "python": "int",
        "java": "",
        "csharp": "",
        "shell": "NumberInt"
      },
      {
        "description": "Long without args",
        "javascript": "Long",
        "python": "Int64",
        "java": "",
        "csharp": "",
        "shell": "NumberLong"
      },
      {
        "description": "Decimal128 without args",
        "javascript": "Decimal128",
        "python": "Decimal128",
        "java": "Decimal128",
        "csharp": "Decimal128",
        "shell": "NumberDecimal"
      },
      {
        "description": "ObjectId without args",
        "javascript": "ObjectId",
        "python": "ObjectId",
        "java": "ObjectId",
        "csharp": "ObjectId",
        "shell": "ObjectId"
      },
      {
        "description": "Code without args",
        "javascript": "Code",
        "python": "Code",
        "java": "Code",
        "csharp": "BsonJavaScript",
        "shell": "Code"
      },
      {
        "description": "Binary without args",
        "javascript": "Binary",
        "python": "Binary",
        "java": "Binary",
        "csharp": "BsonBinaryData",
        "shell": "BinData"
      },
      {
        "description": "DBRef without args",
        "javascript": "DBRef",
        "python": "DBRef",
        "java": "DBRef",
        "csharp": "MongoDBRef",
        "shell": "DBRef"
      },
      {
        "description": "Timestamp without args",
        "javascript": "Timestamp",
        "python": "Timestamp",
        "java": "BSONTimestamp",
        "csharp": "BsonTimestamp",
        "shell": "Timestamp"
      },
      {
        "description": "Symbol without args",
        "javascript": "Symbol",
        "python": "",
        "java": "Symbol",
        "csharp": "Symbol",
        "shell": ""
      },
      {
        "description": "MinKey without args",
        "javascript": "MinKey",
        "python": "MinKey",
        "java": "MinKey",
        "csharp": "BsonMinKey",
        "shell": "MinKey"
      },
      {
        "description": "MaxKey without args",
        "javascript": "MaxKey",
        "python": "MaxKey",
        "java": "MaxKey",
        "csharp": "BsonMaxKey",
        "shell": "MaxKey"
      },
      {
        "description": "BSONRegExp without args",
        "javascript": "BSONRegExp",
        "python": "Regex",
        "java": "BsonRegularExpression",
        "csharp": "BsonRegularExpression",
        "shell": "RegExp"
      },
      {
        "description": "RegExp without args",
        "javascript": "RegExp",
        "python": "re",
        "java": "Pattern",
        "csharp": "Regex",
        "shell": "RegExp"
      },
      {
        "description": "Date without args",
        "javascript": "Date",
        "python": "datetime.datetime",
        "java": "java.util.Date",
        "csharp": "Datetime",
        "shell": "Date"
      }
    ],
    "Methods without args": [
    ]
  }
}
