{
  "tests": {
    "Code": [
      {
        "description": "Code without args",
        "query": "Code()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Code with extra argument (should be 1 or 2)",
        "query": "Code('string', {'x': '1'}, 3)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Code with wrong type of scope",
        "query": "Code('string', 5)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with wrong type of argument",
        "query": "ObjectId({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId with extra argument (should be 0 or 1)",
        "query": "ObjectId('5a7382114ec1f67ae445f778', 5)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .from_datetime() without arguments",
        "query": "ObjectId.from_datetime()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId.from_datetime() with extra argument",
        "query": "ObjectId.from_datetime('5ab901c29ee65f5c8550c5b9', 10)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId.from_datetime() with wrong type of argument",
        "query": "ObjectId.from_datetime({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId.is_valid() without arguments",
        "query": "ObjectId.is_valid()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId.is_valid() with extra argument",
        "query": "ObjectId.is_valid('5ab901c29ee65f5c8550c5b9', 10)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId.is_valid() with wrong type of argument",
        "query": "ObjectId.is_valid({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "DBRef": [
      {
        "description": "DBRef without arguments",
        "query": "DBRef()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with extra argument (should be 2 or 3)",
        "query": "DBRef('coll', ObjectId(), 'db', 5)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with few arguments (should be 2 or 3)",
        "query": "DBRef('coll')",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong oid",
        "query": "DBRef('coll', 1)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong namespace",
        "query": "DBRef(1, ObjectId())",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong db",
        "query": "DBRef('coll', ObjectId(), 5)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "int": [
      {
        "description": "int with extra argument (should be 1)",
        "query": "int(3, 4)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "int with wrong type of argument",
        "query": "int({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "float": [
      {
        "description": "float with extra argument (should be 1)",
        "query": "float(3, 4)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "float with wrong type of argument",
        "query": "float({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "Int64": [
      {
        "description": "Int64 with extra argument",
        "query": "Int64(-1, 2147483647, 3)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Int64 with wrong type of argument",
        "query": "Int64({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "Regex": [
      {
        "description": "RegExp without arguments",
        "query": "Regex()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Regex with extra argument",
        "query": "Regex('^[a-z0-9_-]{3,16}$', 'imuxls', 'extra argument')",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Regex with not a string pattern",
        "query": "Regex(123, 'imuxls')",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Regex with not a string flag",
        "query": "Regex('^[a-z0-9_-]{3,16}$', 123)",
        "errorCode": "E_BSONTRANSPILERS_RUNTIME"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 with extra argument",
        "query": "Decimal128(1, 2)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey with extra argument",
        "query": "MinKey(1)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "MaxKey with extra argument",
        "query": "MaxKey(1)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp without arguments",
        "query": "Timestamp()",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with extra argument (should be 2)",
        "query": "Timestamp(10, 100, 1000)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with few arguments (should be 2)",
        "query": "Timestamp(10)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with wrong type of low",
        "query": "Timestamp({}, 100)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with wrong type of high",
        "query": "Timestamp(10, {})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .as_datetime() with extra argument",
        "query": "Timestamp(1, 100).as_datetime(10)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ],
    "datetime": [
      {
        "description": "datetime with extra argument",
        "query": "datetime(1995, 11, 17, 3, 24, 0, 7, 8)",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "datetime with wrong type of argument",
        "query": "datetime({})",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      },
      {
        "description": "datetime with wrong type of 7th argument",
        "query": "datetime(1, 2, 3, 4, 5, 'str')",
        "errorCode": "E_BSONTRANSPILERS_ARGUMENT"
      }
    ]
  }
}
