/*
 * This Visitor walks the AST generated by the transformers and produces code.
 * For every input language, can "inherit" the generated visitNode methods.
 */
module.exports = (superClass) => class ExtendedVisitor extends superClass {
  constructor() {
    super();
    this.regexFlags = {
      i: 'i', m: 'm', u: 'u', y: 'y', g: 'g'
    };
    this.bsonRegexFlags = {
      i: 'i', m: 'm', x: 'x', s: 's', l: 'l', u: 'u'
    };
  }

  /**
   * Accepts date or number, if date then don't convert to date.
   * @param {FuncCallExpressionContext} ctx
   * @returns {String}
   */
  emitObjectIdCreateFromTime(ctx) {
    ctx.type = 'createFromTime' in this.Symbols.ObjectId.attr ?
      this.Symbols.ObjectId.attr.createFromTime :
      this.Symbols.ObjectId.attr.fromDate;

    const args = this.checkArguments(
      ctx.type.args, this.getArguments(ctx), 'ObjectId.createFromTime'
    );
    if (this.getArgumentAt(ctx, 0).type.id === 'Date') {
      return `ObjectId.fromDate(${args[0]})`;
    }
    return `ObjectId.fromDate(new Date(${args[0]}))`;
  }
};
