{
  "tests": {
    "RegExp": [
      {
        "description": "empty RegExp",
        "javascript": "new RegExp('(?:)')",
        "python": "re.compile(r\"(?:)\")",
        "java": "Pattern.compile(\"(?:)\")",
        "csharp": "new Regex(\"(?:)\")",
        "shell": "RegExp('')"
      },
      {
        "description": "RegExp without options",
        "javascript": "new RegExp('abc')",
        "python": "re.compile(r\"abc\")",
        "java": "Pattern.compile(\"abc\")",
        "csharp": "new Regex(\"abc\")",
        "shell": "RegExp('abc')"
      },
      {
        "description": "regex object with im flags as args",
        "javascript": "new RegExp('ab+c', 'im')",
        "python": "re.compile(r\"ab+c(?im)\")",
        "java": "Pattern.compile(\"ab+c(?im)\")",
        "csharp": "new Regex(\"(?im)ab+c\")",
        "shell": "new RegExp('ab+c', 'im')"
      },
      {
        "description": "regex object with ig flags as args",
        "javascript": "new RegExp('ab+c', 'gi')",
        "python": "re.compile(r\"ab+c(?is)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(\"(?i)ab+c\")",
        "shell": "new RegExp('ab+c', 'ig')"
      },
      {
        "description": "regex object with forward slash",
        "javascript": "new RegExp('ab\\/cd')",
        "python": "re.compile(r\"ab\\/cd\")",
        "java": "Pattern.compile(\"ab\\\\/cd\")",
        "csharp": "new Regex(\"ab\\/cd\")",
        "shell": "new RegExp('ab/cd')"
      },
      {
        "description": "regex object with escaped double quote",
        "javascript": "new RegExp('ab\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(\"ab\\\"ab\")",
        "shell": "new RegExp('ab\\\"ab')"
      },
      {
        "description": "regex object with nonescaped double quote",
        "javascript": "new RegExp('ab\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(\"ab\\\"ab\")",
        "shell": "new RegExp('ab\"ab')"
      },
      {
        "description": "regex object with escaped single quote",
        "javascript": "new RegExp('ab\\'ab')",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(\"ab'ab\")",
        "shell": "new RegExp('ab\\'ab')"
      },
      {
        "description": "regex object with nonescaped single quote",
        "javascript": "new RegExp('ab\\'ab')",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(\"ab'ab\")",
        "shell": "new RegExp(\"ab\\'ab\")"
      },
      {
        "description": "regex object with newline",
        "javascript": "new RegExp('\\n')",
        "python": "re.compile(r\"\\\\n\")",
        "java": "Pattern.compile(\"\\\\n\")",
        "csharp": "new Regex(\"\\n\")",
        "shell": "new RegExp(\"\\\\n\")"
      },
      {
        "description": "regex literal with ig flags",
        "javascript": "new RegExp('ab+c', 'gi')",
        "python": "re.compile(r\"ab+c(?is)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(\"(?i)ab+c\")",
        "shell": "/ab+c/ig"
      },
      {
        "description": "regex object with regex literal arg",
        "javascript": "new RegExp('ab+c', 'i')",
        "python": "re.compile(r\"ab+c(?i)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(\"(?i)ab+c\")",
        "shell": "new RegExp(/ab+c/, 'i')"
      }
    ]
  }
}
