{
  "tests": {
    "Code": [
      {
        "description": "new Code with string code",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "new Code('some code')"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "new Code('string', {\n    'x': '1'\n  })",
        "python": "Code('string', {\n    'x': '1'\n})",
        "java": "new CodeWithScope(\"string\", new Document(\"x\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(\"string\", new BsonDocument(\"x\", \"1\"))",
        "shell": "new Code('string', {\n    'x': '1'\n  })"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "new ObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "new ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "shell": "new ObjectId('5a7382114ec1f67ae445f778')"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', new ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId())",
        "shell": "new DBRef('coll', new ObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', new ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"db\", \"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId(), \"db\")",
        "shell": "new DBRef('coll', new ObjectId(), 'db')"
      }
    ],
    "Int64": [
      {
        "description": "Int64 with number arg",
        "javascript": "Long.fromNumber(9223372036854775807)",
        "python": "Int64(9223372036854775807)",
        "java": "9223372036854775807L",
        "csharp": "9223372036854775807L",
        "shell": "new NumberLong(9223372036854775807)"
      },
      {
        "description": "Int64 with string",
        "javascript": "Long.fromString('9223372036854775807')",
        "python": "Int64('9223372036854775807')",
        "java": "Long.parseLong(\"9223372036854775807\")",
        "csharp": "Convert.ToInt64(\"9223372036854775807\")",
        "shell": "new NumberLong('9223372036854775807')"
      },
      {
        "description": "Int64 with no arg",
        "javascript": "Long.fromNumber(0)",
        "python": "Int64()",
        "java": "0L",
        "csharp": "0L",
        "shell": "new NumberLong(0)"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "new MinKey()"
      },
      {
        "description": "maxKey",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "new MaxKey()"
      }
    ],
    "Regexp": [
      {
        "description": "Regex with string arg",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$')",
        "python": "Regex('^[a-z0-9_-]{3,16}$')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "csharp": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$')"
      },
      {
        "description": "Regex with string arg and flags",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "python": "Regex('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imuxls\")",
        "csharp": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imxs\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$', 'imuxls')"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "new Timestamp(10, 100)"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 with string arg",
        "javascript": "Decimal128.fromString('5.3E-6175')",
        "python": "Decimal128('5.3E-6175')",
        "java": "Decimal128.parse(\"5.3E-6175\")",
        "csharp": "Decimal128.Parse(\"5.3E-6175\")",
        "shell": "new NumberDecimal('5.3E-6175')"
      }
    ]
  }
}
