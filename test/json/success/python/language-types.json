{
  "tests": {
    "binary operations": [
      {
        "description": "addition and subtraction",
        "javascript": "2+5-6",
        "python": "2+5-6",
        "java": "2L+5L-6L",
        "csharp": "2+5-6",
        "shell": "2+5-6"
      },
      {
        "description": "multiplication and division",
        "javascript": "(4*36)/3",
        "python": "(4*36)/3",
        "java": "(4L*36L)/3L",
        "csharp": "(4*36)/3",
        "shell": "(4*36)/3"
      },
      {
        "description": "floor and mod",
        "python": "10 // 2 % 3",
        "javascript": "Math.floor(10, 2)%3",
        "java": "floor(10L, 2L)%3L",
        "csharp": "Math.floor(10, 2)%3",
        "shell": "Math.floor(10, 2)%3"
      },
      {
        "description": "power",
        "python": "6 ** 7",
        "javascript": "Math.pow(6, 7)",
        "java": "pow(6L, 7L)",
        "csharp": "Math.pow(6, 7)",
        "shell": "Math.pow(6, 7)"
      },
      {
        "description": "bit opts",
        "python": "1 | 2 ^ 3 & 4 << 6 >> 7",
        "javascript": "1|2^3&4<<6>>7",
        "java": "1L|2L^3L&4L<<6L>>7L",
        "csharp": "1|2^3&4<<6>>7",
        "shell":"1|2^3&4<<6>>7"
      },
      {
        "description": "addition and subtraction with unary",
        "javascript": "2++5--6",
        "python": "2++5--6",
        "java": "2L++5L--6L",
        "csharp": "2++5--6",
        "shell": "2++5--6"
      }
    ],
    "unary operations": [
      {
        "description": "unary +",
        "python": "+1",
        "javascript": "+1",
        "java": "+1L",
        "csharp": "+1",
        "shell": "+1"
      },
      {
        "description": "unary -",
        "python": "-1",
        "javascript": "-1",
        "java": "-1L",
        "csharp": "-1",
        "shell": "-1"
      },
      {
        "description": "unary ~",
        "python": "~1",
        "javascript": "~1",
        "java": "~1L",
        "csharp": "~1",
        "shell": "~1"
      }
    ],
    "int": [
      {
        "description": "int with number arg",
        "javascript": "new Int32(3)",
        "python": "int(3)",
        "java": "3",
        "csharp": "3",
        "shell": "new NumberInt(3)"
      },
      {
        "description": "int with valid string arg",
        "javascript": "new Int32('3')",
        "python": "int('3')",
        "java": "Integer.parseInt(\"3\")",
        "csharp": "Convert.ToInt32(\"3\")",
        "shell": "new NumberInt('3')"
      },
      {
        "description": "int with decimal arg",
        "javascript": "new Int32(3.0001)",
        "python": "int(3.0001)",
        "java": "(int) 3.0001d",
        "csharp": "Convert.ToInt32(3.0001)",
        "shell": "new NumberInt(3.0001)"
      },
      {
        "description": "int with hex arg",
        "javascript": "new Int32(0x3)",
        "python": "int(0x3)",
        "java": "(int) 0x3",
        "csharp": "Convert.ToInt32(0x3)",
        "shell": "new NumberInt(0x3)"
      },
      {
        "description": "int with octal arg",
        "javascript": "new Int32(0o5)",
        "python": "int(0o5)",
        "java": "(int) 05",
        "csharp": "5",
        "shell": "new NumberInt(0o5)"
      }
    ],
    "float": [
      {
        "description": "float with number arg",
        "javascript": "new Double(3)",
        "python": "float(3)",
        "java": "3d",
        "csharp": "3.0",
        "shell": "3"
      },
      {
        "description": "float with valid string arg",
        "javascript": "new Double('3')",
        "python": "float('3')",
        "java": "Double.parseDouble(\"3\")",
        "csharp": "Convert.ToDouble(\"3\")",
        "shell": "3"
      },
      {
        "description": "float with decimal arg",
        "javascript": "new Double(3.005)",
        "python": "float(3.005)",
        "java": "3.005d",
        "csharp": "3.005",
        "shell": "3.005"
      },
      {
        "description": "float with hex arg",
        "javascript": "new Double(0x3)",
        "python": "float(0x3)",
        "java": "(double) 0x3",
        "csharp": "Convert.ToDouble(0x3)",
        "shell": "0x3"
      },
      {
        "description": "float with octal arg",
        "javascript": "new Double(0o5)",
        "python": "float(0o5)",
        "java": "(double) 05",
        "csharp": "5.0",
        "shell": "0o5"
      }
    ],
    "numeric literals": [
      {
        "description": "integer 2",
        "javascript": "2",
        "python": "2",
        "java": "2L",
        "csharp": "2",
        "shell": "2"
      },
      {
        "description": "larger than int32",
        "javascript": "429496729601",
        "python": "429496729601",
        "java": "429496729601L",
        "csharp": "429496729601",
        "shell": "429496729601"
      },
      {
        "description": "float 2.001",
        "javascript": "2.001",
        "python": "2.001",
        "java": "2.001d",
        "csharp": "2.001",
        "shell": "2.001"
      },
      {
        "description": "Hex number caps",
        "javascript": "0X123ABC",
        "python": "0X123ABC",
        "java": "0X123ABC",
        "csharp": "0X123ABC",
        "shell": "0X123ABC"
      },
      {
        "description": "Hex number lower",
        "javascript": "0x123abc",
        "python": "0x123abc",
        "java": "0x123abc",
        "csharp": "0x123abc",
        "shell": "0x123abc"
      },
      {
        "description": "Octal 0o-prefix number",
        "javascript": "0o1234567",
        "python": "0o1234567",
        "java": "01234567",
        "csharp": "342391",
        "shell": "0o1234567"
      },
      {
        "description": "true",
        "javascript": "true",
        "python": "True",
        "java": "true",
        "csharp": "true",
        "shell": "true"
      },
      {
        "description": "false",
        "javascript": "false",
        "python": "False",
        "java": "false",
        "csharp": "false",
        "shell": "false"
      }
    ],
    "string literals": [
      {
        "description": "Single-quote string",
        "javascript": "'string'",
        "python": "'string'",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "'string'"
      },
      {
        "description": "Double-quote string",
        "python": "\"string\"",
        "javascript": "'string'",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "'string'"
      },
      {
        "description": "Triple single-quote string",
        "javascript": "'string'",
        "python": "'''string'''",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "'string'"
      },
      {
        "description": "Triple double-quote string",
        "javascript": "'string'",
        "python": "\"\"\"string\"\"\"",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "'string'"
      },
      {
        "description": "b prefixed single quote string",
        "python": "b'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "B prefixed single quote string",
        "python": "B'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "b prefixed double quote string",
        "python": "b\"abc\"",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "B prefixed double quote string",
        "python": "B'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "u prefixed single quote string",
        "python": "u'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "U prefixed single quote string",
        "python": "U'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "u prefixed double quote string",
        "python": "u\"abc\"",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "U prefixed double quote string",
        "python": "U'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "fR prefixed double quote string",
        "python": "fR'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      },
      {
        "description": "rB prefixed double quote string",
        "python": "rB'abc'",
        "javascript": "'abc'",
        "java": "\"abc\"",
        "csharp": "\"abc\"",
        "shell": "'abc'"
      }
    ],
    "null": [
      {
        "description": "null",
        "javascript": "null",
        "python": "None",
        "java": "new BsonNull()",
        "csharp": "BsonNull.Value",
        "shell": "null"
      }
    ],
    "Date": [
      {
        "description": "Current date",
        "javascript": "new Date()",
        "python": "datetime()",
        "java": "new java.util.Date()",
        "csharp": "DateTime.Now",
        "shell": "new Date()"
      },
      {
        "description": "Date now",
        "javascript": "Date.now()",
        "python": "datetime.utcnow()",
        "java": "new java.util.Date()",
        "csharp": "DateTime.Now",
        "shell": "Date.now()"
      },
      {
        "description": "new Date from year, month and day",
        "javascript": "new Date('Sun, 17 Dec 1995 00:00:00 GMT')",
        "python": "datetime(1995, 12, 17)",
        "java": "new java.util.Date(819158400000L)",
        "csharp": "new DateTime(1995, 12, 17, 0, 0, 0)",
        "shell": "new Date('Sun, 17 Dec 1995 00:00:00 GMT')"
      },
      {
        "description": "new Date from year, month, day, hour and min",
        "javascript": "new Date('Sun, 17 Dec 1995 03:24:00 GMT')",
        "python": "datetime(1995, 12, 17, 3, 24)",
        "java": "new java.util.Date(819170640000L)",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 0)",
        "shell": "new Date('Sun, 17 Dec 1995 03:24:00 GMT')"
      },
      {
        "description": "new Date from year, month, day, hour, min and sec",
        "javascript": "new Date('Sun, 17 Dec 1995 03:24:55 GMT')",
        "python": "datetime(1995, 12, 17, 3, 24, 55)",
        "java": "new java.util.Date(819170695000L)",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 55)",
        "shell": "new Date('Sun, 17 Dec 1995 03:24:55 GMT')"
      }
    ],
    "re.compile": [
      {
        "description": "empty regex object",
        "javascript": "RegExp('')",
        "python": "re.compile(r\"(?:)\")",
        "java": "Pattern.compile(\"(?:)\")",
        "csharp": "new Regex(\"(?:)\")",
        "shell": "RegExp('(?:)')"
      },
      {
        "description": "regex object without options",
        "javascript": "RegExp('abc')",
        "python": "re.compile(r\"abc\")",
        "java": "Pattern.compile(\"abc\")",
        "csharp": "new Regex(\"abc\")",
        "shell": "RegExp('abc')"
      },
      {
        "description": "regex object with im flags as args",
        "javascript": "new RegExp('ab+c', 'im')",
        "python": "re.compile(r\"ab+c(?im)\")",
        "java": "Pattern.compile(\"ab+c(?im)\")",
        "csharp": "new Regex(\"(?im)ab+c\")",
        "shell": "new RegExp('ab+c', 'im')"
      },
      {
        "description": "regex object with ig flags as args",
        "javascript": "new RegExp('ab+c', 'ig')",
        "python": "re.compile(r\"ab+c(?is)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(\"(?i)ab+c\")",
        "shell": "new RegExp('ab+c', 'gi')"
      },
      {
        "description": "regex object with forward slash",
        "javascript": "new RegExp('ab/cd')",
        "python": "re.compile(r\"ab\\/cd\")",
        "java": "Pattern.compile(\"ab\\\\/cd\")",
        "csharp": "new Regex(\"ab\\/cd\")",
        "shell": "new RegExp('ab\\/cd')"
      },
      {
        "description": "regex object with escaped double quote",
        "javascript": "new RegExp('ab\\\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(\"ab\\\"ab\")",
        "shell": "new RegExp('ab\"ab')"
      },
      {
        "description": "regex object with nonescaped double quote",
        "javascript": "new RegExp('ab\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(\"ab\\\"ab\")",
        "shell": "new RegExp('ab\"ab')"
      },
      {
        "description": "regex object with escaped single quote",
        "javascript": "new RegExp('ab\\'ab')",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(\"ab'ab\")",
        "shell": "new RegExp('ab\\'ab')"
      },
      {
        "description": "regex object with nonescaped single quote",
        "javascript": "new RegExp(\"ab'ab\")",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(\"ab'ab\")",
        "shell": "new RegExp('ab\\'ab')"
      },
      {
        "description": "regex object with newline",
        "javascript": "new RegExp(\"\\\\n\")",
        "python": "re.compile(r\"\\\\n\")",
        "java": "Pattern.compile(\"\\\\n\")",
        "csharp": "new Regex(\"\\n\")",
        "shell": "new RegExp('\\n')"
      }
    ]
  }
}
